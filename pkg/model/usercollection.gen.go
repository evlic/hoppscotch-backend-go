// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"
	"gorm.io/gorm"
)

const TableNameUserCollection = "UserCollection"

// UserCollection mapped from table <UserCollection>
type UserCollection struct {
	ID         string     		`gorm:"column:id;type:text;primaryKey" json:"id"`
	ParentID   *string    		`gorm:"column:parentID;type:text" json:"parentID"`
	UserUID    string     		`gorm:"column:userUid;type:text;not null" json:"userUid"`
	Title      string     		`gorm:"column:title;type:text;not null" json:"title"`
	OrderIndex int32      		`gorm:"column:orderIndex;type:integer;not null" json:"orderIndex"`
	Type       ReqType    		`gorm:"column:type;type:req_type;not null" json:"type"`
	CreatedOn  time.Time  		`gorm:"column:createdOn;type:timestamp(3) without time zone;not null;default:CURRENT_TIMESTAMP" json:"createdOn"`
	UpdatedOn  time.Time  		`gorm:"column:updatedOn;type:timestamp(3) without time zone;not null;autoUpdateTime" json:"updatedOn"`
	Data       *string     		`gorm:"column:data;type:jsonb" json:"data"`
	Parent     *UserCollection	`gorm:"foreignKey:ParentID" json:"parent"`
	User	   User         	`gorm:"foreignKey:UserUID" json:"user"`
	Children   []UserCollection `gorm:"foreignKey:ParentID;references:ID;constraint:OnUpdate:CASCADE,OnDelete:CASCADE" json:"children"`
	Requests   []UserRequest    `gorm:"foreignKey:CollectionID;constraint:OnUpdate:CASCADE,OnDelete:CASCADE" json:"request"`
}

// TableName UserCollection's table name
func (*UserCollection) TableName() string {
	return TableNameUserCollection
}

func (c *UserCollection) IsOwner(uid string) bool {
	return c.UserUID == uid
}

func (*UserCollection) ParentColName() string {
	return "parentID"
}

func (c *UserCollection) Move(db *gorm.DB, next *string) error {
	panic("implement me")
}
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"
	"gorm.io/gorm"
)

const TableNameUserRequest = "UserRequest"

// UserRequest mapped from table <UserRequest>
type UserRequest struct {
	ID           string     	`gorm:"column:id;type:text;primaryKey" json:"id"`
	CollectionID string     	`gorm:"column:collectionID;type:text;not null" json:"collectionID"`
	UserUID      string     	`gorm:"column:userUid;type:text;not null" json:"userUid"`
	Title        string     	`gorm:"column:title;type:text;not null" json:"title"`
	Request      ReqDetail      `gorm:"column:request;type:jsonb;not null" json:"request"`
	Type         ReqType    	`gorm:"column:type;type:req_type;not null" json:"type"`
	OrderIndex   int32      	`gorm:"column:orderIndex;type:integer;not null" json:"orderIndex"`
	CreatedOn    time.Time  	`gorm:"column:createdOn;type:timestamp(3) without time zone;not null;default:CURRENT_TIMESTAMP" json:"createdOn"`
	UpdatedOn    time.Time  	`gorm:"column:updatedOn;type:timestamp(3) without time zone;not null;autoUpdateTime" json:"updatedOn"`
	User	  	 User 			`gorm:"foreignKey:UserUID" json:"user"`
	Collection   UserCollection `gorm:"foreignKey:CollectionID" json:"collection"`
}

// TableName UserRequest's table name
func (*UserRequest) TableName() string {
	return TableNameUserRequest
}

func (r *UserRequest) IsOwner(uid string) bool {
	return r.UserUID == uid
}

func (*UserRequest) ParentColName() string {
	return "collectionID"
}

func (r *UserRequest) Move(db *gorm.DB, next *string) error {
	panic("implement me")
}
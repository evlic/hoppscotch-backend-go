// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"gorm.io/gorm"
)

const TableNameTeamInvitation = "TeamInvitation"

// TeamInvitation mapped from table <TeamInvitation>
type TeamInvitation struct {
	ID           string         `gorm:"column:id;type:text;primaryKey" json:"id"`
	TeamID       string         `gorm:"column:teamID;type:text;not null;uniqueIndex:TeamInvitation_teamID_inviteeEmail_key,priority:1;index:TeamInvitation_teamID_idx,priority:1" json:"teamID"`
	CreatorUID   string         `gorm:"column:creatorUid;type:text;not null" json:"creatorUid"`
	InviteeEmail string         `gorm:"column:inviteeEmail;type:text;not null;uniqueIndex:TeamInvitation_teamID_inviteeEmail_key,priority:2" json:"inviteeEmail"`
	InviteeRole  TeamMemberRole `gorm:"column:inviteeRole;type:team_member_role;not null" json:"inviteeRole"`
	Team       	 Team   		`gorm:"foreignKey:TeamID" json:"team"`
	Creator    	 User 			`gorm:"foreignKey:CreatorUID" json:"creator"`
}

// TableName TeamInvitation's table name
func (*TeamInvitation) TableName() string {
	return TableNameTeamInvitation
}

func (i *TeamInvitation) GetTeamID() string {
	return i.TeamID
}


func (i *TeamInvitation) Can(db *gorm.DB, uid string, role TeamMemberRole) bool {
	member := &TeamMember{}
	if db.First(member, `"userUid"=? AND "teamID"=?`, uid, i.TeamID).Error != nil {
		switch role {
		case VIEWER:
			return true
		case EDITOR:
			return member.Role == OWNER || member.Role == EDITOR
		case OWNER:
			return member.Role == OWNER
		default:
			return false
		}
	}
	return false
}

func (i *TeamInvitation) IsOwner(uid string) bool {
	return i.CreatorUID == uid
}

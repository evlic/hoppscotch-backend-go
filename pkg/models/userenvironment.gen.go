// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"model"
)

func newUserEnvironment(db *gorm.DB, opts ...gen.DOOption) userEnvironment {
	_userEnvironment := userEnvironment{}

	_userEnvironment.userEnvironmentDo.UseDB(db, opts...)
	_userEnvironment.userEnvironmentDo.UseModel(&model.UserEnvironment{})

	tableName := _userEnvironment.userEnvironmentDo.TableName()
	_userEnvironment.ALL = field.NewAsterisk(tableName)
	_userEnvironment.ID = field.NewString(tableName, "id")
	_userEnvironment.UserUID = field.NewString(tableName, "userUid")
	_userEnvironment.Name = field.NewString(tableName, "name")
	_userEnvironment.Variables = field.NewField(tableName, "variables")
	_userEnvironment.IsGlobal = field.NewBool(tableName, "isGlobal")

	_userEnvironment.fillFieldMap()

	return _userEnvironment
}

type userEnvironment struct {
	userEnvironmentDo

	ALL       field.Asterisk
	ID        field.String
	UserUID   field.String
	Name      field.String
	Variables field.Field
	IsGlobal  field.Bool

	fieldMap map[string]field.Expr
}

func (u userEnvironment) Table(newTableName string) *userEnvironment {
	u.userEnvironmentDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userEnvironment) As(alias string) *userEnvironment {
	u.userEnvironmentDo.DO = *(u.userEnvironmentDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userEnvironment) updateTableName(table string) *userEnvironment {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.UserUID = field.NewString(table, "userUid")
	u.Name = field.NewString(table, "name")
	u.Variables = field.NewField(table, "variables")
	u.IsGlobal = field.NewBool(table, "isGlobal")

	u.fillFieldMap()

	return u
}

func (u *userEnvironment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userEnvironment) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["userUid"] = u.UserUID
	u.fieldMap["name"] = u.Name
	u.fieldMap["variables"] = u.Variables
	u.fieldMap["isGlobal"] = u.IsGlobal
}

func (u userEnvironment) clone(db *gorm.DB) userEnvironment {
	u.userEnvironmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userEnvironment) replaceDB(db *gorm.DB) userEnvironment {
	u.userEnvironmentDo.ReplaceDB(db)
	return u
}

type userEnvironmentDo struct{ gen.DO }

type IUserEnvironmentDo interface {
	gen.SubQuery
	Debug() IUserEnvironmentDo
	WithContext(ctx context.Context) IUserEnvironmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserEnvironmentDo
	WriteDB() IUserEnvironmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserEnvironmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserEnvironmentDo
	Not(conds ...gen.Condition) IUserEnvironmentDo
	Or(conds ...gen.Condition) IUserEnvironmentDo
	Select(conds ...field.Expr) IUserEnvironmentDo
	Where(conds ...gen.Condition) IUserEnvironmentDo
	Order(conds ...field.Expr) IUserEnvironmentDo
	Distinct(cols ...field.Expr) IUserEnvironmentDo
	Omit(cols ...field.Expr) IUserEnvironmentDo
	Join(table schema.Tabler, on ...field.Expr) IUserEnvironmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserEnvironmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserEnvironmentDo
	Group(cols ...field.Expr) IUserEnvironmentDo
	Having(conds ...gen.Condition) IUserEnvironmentDo
	Limit(limit int) IUserEnvironmentDo
	Offset(offset int) IUserEnvironmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEnvironmentDo
	Unscoped() IUserEnvironmentDo
	Create(values ...*model.UserEnvironment) error
	CreateInBatches(values []*model.UserEnvironment, batchSize int) error
	Save(values ...*model.UserEnvironment) error
	First() (*model.UserEnvironment, error)
	Take() (*model.UserEnvironment, error)
	Last() (*model.UserEnvironment, error)
	Find() ([]*model.UserEnvironment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEnvironment, err error)
	FindInBatches(result *[]*model.UserEnvironment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserEnvironment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserEnvironmentDo
	Assign(attrs ...field.AssignExpr) IUserEnvironmentDo
	Joins(fields ...field.RelationField) IUserEnvironmentDo
	Preload(fields ...field.RelationField) IUserEnvironmentDo
	FirstOrInit() (*model.UserEnvironment, error)
	FirstOrCreate() (*model.UserEnvironment, error)
	FindByPage(offset int, limit int) (result []*model.UserEnvironment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserEnvironmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userEnvironmentDo) Debug() IUserEnvironmentDo {
	return u.withDO(u.DO.Debug())
}

func (u userEnvironmentDo) WithContext(ctx context.Context) IUserEnvironmentDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userEnvironmentDo) ReadDB() IUserEnvironmentDo {
	return u.Clauses(dbresolver.Read)
}

func (u userEnvironmentDo) WriteDB() IUserEnvironmentDo {
	return u.Clauses(dbresolver.Write)
}

func (u userEnvironmentDo) Session(config *gorm.Session) IUserEnvironmentDo {
	return u.withDO(u.DO.Session(config))
}

func (u userEnvironmentDo) Clauses(conds ...clause.Expression) IUserEnvironmentDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userEnvironmentDo) Returning(value interface{}, columns ...string) IUserEnvironmentDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userEnvironmentDo) Not(conds ...gen.Condition) IUserEnvironmentDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userEnvironmentDo) Or(conds ...gen.Condition) IUserEnvironmentDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userEnvironmentDo) Select(conds ...field.Expr) IUserEnvironmentDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userEnvironmentDo) Where(conds ...gen.Condition) IUserEnvironmentDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userEnvironmentDo) Order(conds ...field.Expr) IUserEnvironmentDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userEnvironmentDo) Distinct(cols ...field.Expr) IUserEnvironmentDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userEnvironmentDo) Omit(cols ...field.Expr) IUserEnvironmentDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userEnvironmentDo) Join(table schema.Tabler, on ...field.Expr) IUserEnvironmentDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userEnvironmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserEnvironmentDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userEnvironmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserEnvironmentDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userEnvironmentDo) Group(cols ...field.Expr) IUserEnvironmentDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userEnvironmentDo) Having(conds ...gen.Condition) IUserEnvironmentDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userEnvironmentDo) Limit(limit int) IUserEnvironmentDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userEnvironmentDo) Offset(offset int) IUserEnvironmentDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userEnvironmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserEnvironmentDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userEnvironmentDo) Unscoped() IUserEnvironmentDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userEnvironmentDo) Create(values ...*model.UserEnvironment) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userEnvironmentDo) CreateInBatches(values []*model.UserEnvironment, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userEnvironmentDo) Save(values ...*model.UserEnvironment) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userEnvironmentDo) First() (*model.UserEnvironment, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEnvironment), nil
	}
}

func (u userEnvironmentDo) Take() (*model.UserEnvironment, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEnvironment), nil
	}
}

func (u userEnvironmentDo) Last() (*model.UserEnvironment, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEnvironment), nil
	}
}

func (u userEnvironmentDo) Find() ([]*model.UserEnvironment, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserEnvironment), err
}

func (u userEnvironmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserEnvironment, err error) {
	buf := make([]*model.UserEnvironment, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userEnvironmentDo) FindInBatches(result *[]*model.UserEnvironment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userEnvironmentDo) Attrs(attrs ...field.AssignExpr) IUserEnvironmentDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userEnvironmentDo) Assign(attrs ...field.AssignExpr) IUserEnvironmentDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userEnvironmentDo) Joins(fields ...field.RelationField) IUserEnvironmentDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userEnvironmentDo) Preload(fields ...field.RelationField) IUserEnvironmentDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userEnvironmentDo) FirstOrInit() (*model.UserEnvironment, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEnvironment), nil
	}
}

func (u userEnvironmentDo) FirstOrCreate() (*model.UserEnvironment, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserEnvironment), nil
	}
}

func (u userEnvironmentDo) FindByPage(offset int, limit int) (result []*model.UserEnvironment, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userEnvironmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userEnvironmentDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userEnvironmentDo) Delete(models ...*model.UserEnvironment) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userEnvironmentDo) withDO(do gen.Dao) *userEnvironmentDo {
	u.DO = *do.(*gen.DO)
	return u
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"model"
)

func newShortcode(db *gorm.DB, opts ...gen.DOOption) shortcode {
	_shortcode := shortcode{}

	_shortcode.shortcodeDo.UseDB(db, opts...)
	_shortcode.shortcodeDo.UseModel(&model.Shortcode{})

	tableName := _shortcode.shortcodeDo.TableName()
	_shortcode.ALL = field.NewAsterisk(tableName)
	_shortcode.ID = field.NewString(tableName, "id")
	_shortcode.Request = field.NewField(tableName, "request")
	_shortcode.CreatorUID = field.NewString(tableName, "creatorUid")
	_shortcode.CreatedOn = field.NewTime(tableName, "createdOn")
	_shortcode.EmbedProperties = field.NewField(tableName, "embedProperties")
	_shortcode.UpdatedOn = field.NewTime(tableName, "updatedOn")

	_shortcode.fillFieldMap()

	return _shortcode
}

type shortcode struct {
	shortcodeDo

	ALL             field.Asterisk
	ID              field.String
	Request         field.Field
	CreatorUID      field.String
	CreatedOn       field.Time
	EmbedProperties field.Field
	UpdatedOn       field.Time

	fieldMap map[string]field.Expr
}

func (s shortcode) Table(newTableName string) *shortcode {
	s.shortcodeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shortcode) As(alias string) *shortcode {
	s.shortcodeDo.DO = *(s.shortcodeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shortcode) updateTableName(table string) *shortcode {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Request = field.NewField(table, "request")
	s.CreatorUID = field.NewString(table, "creatorUid")
	s.CreatedOn = field.NewTime(table, "createdOn")
	s.EmbedProperties = field.NewField(table, "embedProperties")
	s.UpdatedOn = field.NewTime(table, "updatedOn")

	s.fillFieldMap()

	return s
}

func (s *shortcode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shortcode) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["request"] = s.Request
	s.fieldMap["creatorUid"] = s.CreatorUID
	s.fieldMap["createdOn"] = s.CreatedOn
	s.fieldMap["embedProperties"] = s.EmbedProperties
	s.fieldMap["updatedOn"] = s.UpdatedOn
}

func (s shortcode) clone(db *gorm.DB) shortcode {
	s.shortcodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shortcode) replaceDB(db *gorm.DB) shortcode {
	s.shortcodeDo.ReplaceDB(db)
	return s
}

type shortcodeDo struct{ gen.DO }

type IShortcodeDo interface {
	gen.SubQuery
	Debug() IShortcodeDo
	WithContext(ctx context.Context) IShortcodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShortcodeDo
	WriteDB() IShortcodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShortcodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShortcodeDo
	Not(conds ...gen.Condition) IShortcodeDo
	Or(conds ...gen.Condition) IShortcodeDo
	Select(conds ...field.Expr) IShortcodeDo
	Where(conds ...gen.Condition) IShortcodeDo
	Order(conds ...field.Expr) IShortcodeDo
	Distinct(cols ...field.Expr) IShortcodeDo
	Omit(cols ...field.Expr) IShortcodeDo
	Join(table schema.Tabler, on ...field.Expr) IShortcodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShortcodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShortcodeDo
	Group(cols ...field.Expr) IShortcodeDo
	Having(conds ...gen.Condition) IShortcodeDo
	Limit(limit int) IShortcodeDo
	Offset(offset int) IShortcodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShortcodeDo
	Unscoped() IShortcodeDo
	Create(values ...*model.Shortcode) error
	CreateInBatches(values []*model.Shortcode, batchSize int) error
	Save(values ...*model.Shortcode) error
	First() (*model.Shortcode, error)
	Take() (*model.Shortcode, error)
	Last() (*model.Shortcode, error)
	Find() ([]*model.Shortcode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Shortcode, err error)
	FindInBatches(result *[]*model.Shortcode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Shortcode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShortcodeDo
	Assign(attrs ...field.AssignExpr) IShortcodeDo
	Joins(fields ...field.RelationField) IShortcodeDo
	Preload(fields ...field.RelationField) IShortcodeDo
	FirstOrInit() (*model.Shortcode, error)
	FirstOrCreate() (*model.Shortcode, error)
	FindByPage(offset int, limit int) (result []*model.Shortcode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShortcodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shortcodeDo) Debug() IShortcodeDo {
	return s.withDO(s.DO.Debug())
}

func (s shortcodeDo) WithContext(ctx context.Context) IShortcodeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shortcodeDo) ReadDB() IShortcodeDo {
	return s.Clauses(dbresolver.Read)
}

func (s shortcodeDo) WriteDB() IShortcodeDo {
	return s.Clauses(dbresolver.Write)
}

func (s shortcodeDo) Session(config *gorm.Session) IShortcodeDo {
	return s.withDO(s.DO.Session(config))
}

func (s shortcodeDo) Clauses(conds ...clause.Expression) IShortcodeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shortcodeDo) Returning(value interface{}, columns ...string) IShortcodeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shortcodeDo) Not(conds ...gen.Condition) IShortcodeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shortcodeDo) Or(conds ...gen.Condition) IShortcodeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shortcodeDo) Select(conds ...field.Expr) IShortcodeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shortcodeDo) Where(conds ...gen.Condition) IShortcodeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shortcodeDo) Order(conds ...field.Expr) IShortcodeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shortcodeDo) Distinct(cols ...field.Expr) IShortcodeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shortcodeDo) Omit(cols ...field.Expr) IShortcodeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shortcodeDo) Join(table schema.Tabler, on ...field.Expr) IShortcodeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shortcodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShortcodeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shortcodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IShortcodeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shortcodeDo) Group(cols ...field.Expr) IShortcodeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shortcodeDo) Having(conds ...gen.Condition) IShortcodeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shortcodeDo) Limit(limit int) IShortcodeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shortcodeDo) Offset(offset int) IShortcodeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shortcodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShortcodeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shortcodeDo) Unscoped() IShortcodeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shortcodeDo) Create(values ...*model.Shortcode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shortcodeDo) CreateInBatches(values []*model.Shortcode, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shortcodeDo) Save(values ...*model.Shortcode) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shortcodeDo) First() (*model.Shortcode, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shortcode), nil
	}
}

func (s shortcodeDo) Take() (*model.Shortcode, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shortcode), nil
	}
}

func (s shortcodeDo) Last() (*model.Shortcode, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shortcode), nil
	}
}

func (s shortcodeDo) Find() ([]*model.Shortcode, error) {
	result, err := s.DO.Find()
	return result.([]*model.Shortcode), err
}

func (s shortcodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Shortcode, err error) {
	buf := make([]*model.Shortcode, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shortcodeDo) FindInBatches(result *[]*model.Shortcode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shortcodeDo) Attrs(attrs ...field.AssignExpr) IShortcodeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shortcodeDo) Assign(attrs ...field.AssignExpr) IShortcodeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shortcodeDo) Joins(fields ...field.RelationField) IShortcodeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shortcodeDo) Preload(fields ...field.RelationField) IShortcodeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shortcodeDo) FirstOrInit() (*model.Shortcode, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shortcode), nil
	}
}

func (s shortcodeDo) FirstOrCreate() (*model.Shortcode, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Shortcode), nil
	}
}

func (s shortcodeDo) FindByPage(offset int, limit int) (result []*model.Shortcode, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shortcodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shortcodeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shortcodeDo) Delete(models ...*model.Shortcode) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shortcodeDo) withDO(do gen.Dao) *shortcodeDo {
	s.DO = *do.(*gen.DO)
	return s
}

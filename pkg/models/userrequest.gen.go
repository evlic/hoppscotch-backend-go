// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"model"
)

func newUserRequest(db *gorm.DB, opts ...gen.DOOption) userRequest {
	_userRequest := userRequest{}

	_userRequest.userRequestDo.UseDB(db, opts...)
	_userRequest.userRequestDo.UseModel(&model.UserRequest{})

	tableName := _userRequest.userRequestDo.TableName()
	_userRequest.ALL = field.NewAsterisk(tableName)
	_userRequest.ID = field.NewString(tableName, "id")
	_userRequest.CollectionID = field.NewString(tableName, "collectionID")
	_userRequest.UserUID = field.NewString(tableName, "userUid")
	_userRequest.Title = field.NewString(tableName, "title")
	_userRequest.Request = field.NewField(tableName, "request")
	_userRequest.Type = field.NewField(tableName, "type")
	_userRequest.OrderIndex = field.NewInt32(tableName, "orderIndex")
	_userRequest.CreatedOn = field.NewTime(tableName, "createdOn")
	_userRequest.UpdatedOn = field.NewTime(tableName, "updatedOn")

	_userRequest.fillFieldMap()

	return _userRequest
}

type userRequest struct {
	userRequestDo

	ALL          field.Asterisk
	ID           field.String
	CollectionID field.String
	UserUID      field.String
	Title        field.String
	Request      field.Field
	Type         field.Field
	OrderIndex   field.Int32
	CreatedOn    field.Time
	UpdatedOn    field.Time

	fieldMap map[string]field.Expr
}

func (u userRequest) Table(newTableName string) *userRequest {
	u.userRequestDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRequest) As(alias string) *userRequest {
	u.userRequestDo.DO = *(u.userRequestDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRequest) updateTableName(table string) *userRequest {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.CollectionID = field.NewString(table, "collectionID")
	u.UserUID = field.NewString(table, "userUid")
	u.Title = field.NewString(table, "title")
	u.Request = field.NewField(table, "request")
	u.Type = field.NewField(table, "type")
	u.OrderIndex = field.NewInt32(table, "orderIndex")
	u.CreatedOn = field.NewTime(table, "createdOn")
	u.UpdatedOn = field.NewTime(table, "updatedOn")

	u.fillFieldMap()

	return u
}

func (u *userRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRequest) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["collectionID"] = u.CollectionID
	u.fieldMap["userUid"] = u.UserUID
	u.fieldMap["title"] = u.Title
	u.fieldMap["request"] = u.Request
	u.fieldMap["type"] = u.Type
	u.fieldMap["orderIndex"] = u.OrderIndex
	u.fieldMap["createdOn"] = u.CreatedOn
	u.fieldMap["updatedOn"] = u.UpdatedOn
}

func (u userRequest) clone(db *gorm.DB) userRequest {
	u.userRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRequest) replaceDB(db *gorm.DB) userRequest {
	u.userRequestDo.ReplaceDB(db)
	return u
}

type userRequestDo struct{ gen.DO }

type IUserRequestDo interface {
	gen.SubQuery
	Debug() IUserRequestDo
	WithContext(ctx context.Context) IUserRequestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRequestDo
	WriteDB() IUserRequestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRequestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRequestDo
	Not(conds ...gen.Condition) IUserRequestDo
	Or(conds ...gen.Condition) IUserRequestDo
	Select(conds ...field.Expr) IUserRequestDo
	Where(conds ...gen.Condition) IUserRequestDo
	Order(conds ...field.Expr) IUserRequestDo
	Distinct(cols ...field.Expr) IUserRequestDo
	Omit(cols ...field.Expr) IUserRequestDo
	Join(table schema.Tabler, on ...field.Expr) IUserRequestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRequestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRequestDo
	Group(cols ...field.Expr) IUserRequestDo
	Having(conds ...gen.Condition) IUserRequestDo
	Limit(limit int) IUserRequestDo
	Offset(offset int) IUserRequestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRequestDo
	Unscoped() IUserRequestDo
	Create(values ...*model.UserRequest) error
	CreateInBatches(values []*model.UserRequest, batchSize int) error
	Save(values ...*model.UserRequest) error
	First() (*model.UserRequest, error)
	Take() (*model.UserRequest, error)
	Last() (*model.UserRequest, error)
	Find() ([]*model.UserRequest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRequest, err error)
	FindInBatches(result *[]*model.UserRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRequest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRequestDo
	Assign(attrs ...field.AssignExpr) IUserRequestDo
	Joins(fields ...field.RelationField) IUserRequestDo
	Preload(fields ...field.RelationField) IUserRequestDo
	FirstOrInit() (*model.UserRequest, error)
	FirstOrCreate() (*model.UserRequest, error)
	FindByPage(offset int, limit int) (result []*model.UserRequest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRequestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRequestDo) Debug() IUserRequestDo {
	return u.withDO(u.DO.Debug())
}

func (u userRequestDo) WithContext(ctx context.Context) IUserRequestDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRequestDo) ReadDB() IUserRequestDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRequestDo) WriteDB() IUserRequestDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRequestDo) Session(config *gorm.Session) IUserRequestDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRequestDo) Clauses(conds ...clause.Expression) IUserRequestDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRequestDo) Returning(value interface{}, columns ...string) IUserRequestDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRequestDo) Not(conds ...gen.Condition) IUserRequestDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRequestDo) Or(conds ...gen.Condition) IUserRequestDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRequestDo) Select(conds ...field.Expr) IUserRequestDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRequestDo) Where(conds ...gen.Condition) IUserRequestDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRequestDo) Order(conds ...field.Expr) IUserRequestDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRequestDo) Distinct(cols ...field.Expr) IUserRequestDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRequestDo) Omit(cols ...field.Expr) IUserRequestDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRequestDo) Join(table schema.Tabler, on ...field.Expr) IUserRequestDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRequestDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRequestDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRequestDo) Group(cols ...field.Expr) IUserRequestDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRequestDo) Having(conds ...gen.Condition) IUserRequestDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRequestDo) Limit(limit int) IUserRequestDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRequestDo) Offset(offset int) IUserRequestDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRequestDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRequestDo) Unscoped() IUserRequestDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRequestDo) Create(values ...*model.UserRequest) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRequestDo) CreateInBatches(values []*model.UserRequest, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRequestDo) Save(values ...*model.UserRequest) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRequestDo) First() (*model.UserRequest, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRequest), nil
	}
}

func (u userRequestDo) Take() (*model.UserRequest, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRequest), nil
	}
}

func (u userRequestDo) Last() (*model.UserRequest, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRequest), nil
	}
}

func (u userRequestDo) Find() ([]*model.UserRequest, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRequest), err
}

func (u userRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRequest, err error) {
	buf := make([]*model.UserRequest, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRequestDo) FindInBatches(result *[]*model.UserRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRequestDo) Attrs(attrs ...field.AssignExpr) IUserRequestDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRequestDo) Assign(attrs ...field.AssignExpr) IUserRequestDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRequestDo) Joins(fields ...field.RelationField) IUserRequestDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRequestDo) Preload(fields ...field.RelationField) IUserRequestDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRequestDo) FirstOrInit() (*model.UserRequest, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRequest), nil
	}
}

func (u userRequestDo) FirstOrCreate() (*model.UserRequest, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRequest), nil
	}
}

func (u userRequestDo) FindByPage(offset int, limit int) (result []*model.UserRequest, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRequestDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRequestDo) Delete(models ...*model.UserRequest) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRequestDo) withDO(do gen.Dao) *userRequestDo {
	u.DO = *do.(*gen.DO)
	return u
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"model"
)

func newUserCollection(db *gorm.DB, opts ...gen.DOOption) userCollection {
	_userCollection := userCollection{}

	_userCollection.userCollectionDo.UseDB(db, opts...)
	_userCollection.userCollectionDo.UseModel(&model.UserCollection{})

	tableName := _userCollection.userCollectionDo.TableName()
	_userCollection.ALL = field.NewAsterisk(tableName)
	_userCollection.ID = field.NewString(tableName, "id")
	_userCollection.ParentID = field.NewString(tableName, "parentID")
	_userCollection.UserUID = field.NewString(tableName, "userUid")
	_userCollection.Title = field.NewString(tableName, "title")
	_userCollection.OrderIndex = field.NewInt32(tableName, "orderIndex")
	_userCollection.Type = field.NewField(tableName, "type")
	_userCollection.CreatedOn = field.NewTime(tableName, "createdOn")
	_userCollection.UpdatedOn = field.NewTime(tableName, "updatedOn")
	_userCollection.Data = field.NewField(tableName, "data")

	_userCollection.fillFieldMap()

	return _userCollection
}

type userCollection struct {
	userCollectionDo

	ALL        field.Asterisk
	ID         field.String
	ParentID   field.String
	UserUID    field.String
	Title      field.String
	OrderIndex field.Int32
	Type       field.Field
	CreatedOn  field.Time
	UpdatedOn  field.Time
	Data       field.Field

	fieldMap map[string]field.Expr
}

func (u userCollection) Table(newTableName string) *userCollection {
	u.userCollectionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCollection) As(alias string) *userCollection {
	u.userCollectionDo.DO = *(u.userCollectionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCollection) updateTableName(table string) *userCollection {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.ParentID = field.NewString(table, "parentID")
	u.UserUID = field.NewString(table, "userUid")
	u.Title = field.NewString(table, "title")
	u.OrderIndex = field.NewInt32(table, "orderIndex")
	u.Type = field.NewField(table, "type")
	u.CreatedOn = field.NewTime(table, "createdOn")
	u.UpdatedOn = field.NewTime(table, "updatedOn")
	u.Data = field.NewField(table, "data")

	u.fillFieldMap()

	return u
}

func (u *userCollection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCollection) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["parentID"] = u.ParentID
	u.fieldMap["userUid"] = u.UserUID
	u.fieldMap["title"] = u.Title
	u.fieldMap["orderIndex"] = u.OrderIndex
	u.fieldMap["type"] = u.Type
	u.fieldMap["createdOn"] = u.CreatedOn
	u.fieldMap["updatedOn"] = u.UpdatedOn
	u.fieldMap["data"] = u.Data
}

func (u userCollection) clone(db *gorm.DB) userCollection {
	u.userCollectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCollection) replaceDB(db *gorm.DB) userCollection {
	u.userCollectionDo.ReplaceDB(db)
	return u
}

type userCollectionDo struct{ gen.DO }

type IUserCollectionDo interface {
	gen.SubQuery
	Debug() IUserCollectionDo
	WithContext(ctx context.Context) IUserCollectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserCollectionDo
	WriteDB() IUserCollectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserCollectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserCollectionDo
	Not(conds ...gen.Condition) IUserCollectionDo
	Or(conds ...gen.Condition) IUserCollectionDo
	Select(conds ...field.Expr) IUserCollectionDo
	Where(conds ...gen.Condition) IUserCollectionDo
	Order(conds ...field.Expr) IUserCollectionDo
	Distinct(cols ...field.Expr) IUserCollectionDo
	Omit(cols ...field.Expr) IUserCollectionDo
	Join(table schema.Tabler, on ...field.Expr) IUserCollectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserCollectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserCollectionDo
	Group(cols ...field.Expr) IUserCollectionDo
	Having(conds ...gen.Condition) IUserCollectionDo
	Limit(limit int) IUserCollectionDo
	Offset(offset int) IUserCollectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCollectionDo
	Unscoped() IUserCollectionDo
	Create(values ...*model.UserCollection) error
	CreateInBatches(values []*model.UserCollection, batchSize int) error
	Save(values ...*model.UserCollection) error
	First() (*model.UserCollection, error)
	Take() (*model.UserCollection, error)
	Last() (*model.UserCollection, error)
	Find() ([]*model.UserCollection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCollection, err error)
	FindInBatches(result *[]*model.UserCollection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserCollection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserCollectionDo
	Assign(attrs ...field.AssignExpr) IUserCollectionDo
	Joins(fields ...field.RelationField) IUserCollectionDo
	Preload(fields ...field.RelationField) IUserCollectionDo
	FirstOrInit() (*model.UserCollection, error)
	FirstOrCreate() (*model.UserCollection, error)
	FindByPage(offset int, limit int) (result []*model.UserCollection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserCollectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userCollectionDo) Debug() IUserCollectionDo {
	return u.withDO(u.DO.Debug())
}

func (u userCollectionDo) WithContext(ctx context.Context) IUserCollectionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCollectionDo) ReadDB() IUserCollectionDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCollectionDo) WriteDB() IUserCollectionDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCollectionDo) Session(config *gorm.Session) IUserCollectionDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCollectionDo) Clauses(conds ...clause.Expression) IUserCollectionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCollectionDo) Returning(value interface{}, columns ...string) IUserCollectionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCollectionDo) Not(conds ...gen.Condition) IUserCollectionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCollectionDo) Or(conds ...gen.Condition) IUserCollectionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCollectionDo) Select(conds ...field.Expr) IUserCollectionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCollectionDo) Where(conds ...gen.Condition) IUserCollectionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCollectionDo) Order(conds ...field.Expr) IUserCollectionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCollectionDo) Distinct(cols ...field.Expr) IUserCollectionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCollectionDo) Omit(cols ...field.Expr) IUserCollectionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCollectionDo) Join(table schema.Tabler, on ...field.Expr) IUserCollectionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCollectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserCollectionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCollectionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserCollectionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCollectionDo) Group(cols ...field.Expr) IUserCollectionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCollectionDo) Having(conds ...gen.Condition) IUserCollectionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCollectionDo) Limit(limit int) IUserCollectionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCollectionDo) Offset(offset int) IUserCollectionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCollectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCollectionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCollectionDo) Unscoped() IUserCollectionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCollectionDo) Create(values ...*model.UserCollection) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCollectionDo) CreateInBatches(values []*model.UserCollection, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCollectionDo) Save(values ...*model.UserCollection) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCollectionDo) First() (*model.UserCollection, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollection), nil
	}
}

func (u userCollectionDo) Take() (*model.UserCollection, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollection), nil
	}
}

func (u userCollectionDo) Last() (*model.UserCollection, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollection), nil
	}
}

func (u userCollectionDo) Find() ([]*model.UserCollection, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCollection), err
}

func (u userCollectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCollection, err error) {
	buf := make([]*model.UserCollection, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCollectionDo) FindInBatches(result *[]*model.UserCollection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCollectionDo) Attrs(attrs ...field.AssignExpr) IUserCollectionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCollectionDo) Assign(attrs ...field.AssignExpr) IUserCollectionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCollectionDo) Joins(fields ...field.RelationField) IUserCollectionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCollectionDo) Preload(fields ...field.RelationField) IUserCollectionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCollectionDo) FirstOrInit() (*model.UserCollection, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollection), nil
	}
}

func (u userCollectionDo) FirstOrCreate() (*model.UserCollection, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCollection), nil
	}
}

func (u userCollectionDo) FindByPage(offset int, limit int) (result []*model.UserCollection, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCollectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCollectionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCollectionDo) Delete(models ...*model.UserCollection) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCollectionDo) withDO(do gen.Dao) *userCollectionDo {
	u.DO = *do.(*gen.DO)
	return u
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"model"
)

func newInvitedUser(db *gorm.DB, opts ...gen.DOOption) invitedUser {
	_invitedUser := invitedUser{}

	_invitedUser.invitedUserDo.UseDB(db, opts...)
	_invitedUser.invitedUserDo.UseModel(&model.InvitedUser{})

	tableName := _invitedUser.invitedUserDo.TableName()
	_invitedUser.ALL = field.NewAsterisk(tableName)
	_invitedUser.AdminUID = field.NewString(tableName, "adminUid")
	_invitedUser.AdminEmail = field.NewString(tableName, "adminEmail")
	_invitedUser.InviteeEmail = field.NewString(tableName, "inviteeEmail")
	_invitedUser.InvitedOn = field.NewTime(tableName, "invitedOn")

	_invitedUser.fillFieldMap()

	return _invitedUser
}

type invitedUser struct {
	invitedUserDo

	ALL          field.Asterisk
	AdminUID     field.String
	AdminEmail   field.String
	InviteeEmail field.String
	InvitedOn    field.Time

	fieldMap map[string]field.Expr
}

func (i invitedUser) Table(newTableName string) *invitedUser {
	i.invitedUserDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invitedUser) As(alias string) *invitedUser {
	i.invitedUserDo.DO = *(i.invitedUserDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invitedUser) updateTableName(table string) *invitedUser {
	i.ALL = field.NewAsterisk(table)
	i.AdminUID = field.NewString(table, "adminUid")
	i.AdminEmail = field.NewString(table, "adminEmail")
	i.InviteeEmail = field.NewString(table, "inviteeEmail")
	i.InvitedOn = field.NewTime(table, "invitedOn")

	i.fillFieldMap()

	return i
}

func (i *invitedUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invitedUser) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 4)
	i.fieldMap["adminUid"] = i.AdminUID
	i.fieldMap["adminEmail"] = i.AdminEmail
	i.fieldMap["inviteeEmail"] = i.InviteeEmail
	i.fieldMap["invitedOn"] = i.InvitedOn
}

func (i invitedUser) clone(db *gorm.DB) invitedUser {
	i.invitedUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i invitedUser) replaceDB(db *gorm.DB) invitedUser {
	i.invitedUserDo.ReplaceDB(db)
	return i
}

type invitedUserDo struct{ gen.DO }

type IInvitedUserDo interface {
	gen.SubQuery
	Debug() IInvitedUserDo
	WithContext(ctx context.Context) IInvitedUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInvitedUserDo
	WriteDB() IInvitedUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInvitedUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInvitedUserDo
	Not(conds ...gen.Condition) IInvitedUserDo
	Or(conds ...gen.Condition) IInvitedUserDo
	Select(conds ...field.Expr) IInvitedUserDo
	Where(conds ...gen.Condition) IInvitedUserDo
	Order(conds ...field.Expr) IInvitedUserDo
	Distinct(cols ...field.Expr) IInvitedUserDo
	Omit(cols ...field.Expr) IInvitedUserDo
	Join(table schema.Tabler, on ...field.Expr) IInvitedUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInvitedUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInvitedUserDo
	Group(cols ...field.Expr) IInvitedUserDo
	Having(conds ...gen.Condition) IInvitedUserDo
	Limit(limit int) IInvitedUserDo
	Offset(offset int) IInvitedUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInvitedUserDo
	Unscoped() IInvitedUserDo
	Create(values ...*model.InvitedUser) error
	CreateInBatches(values []*model.InvitedUser, batchSize int) error
	Save(values ...*model.InvitedUser) error
	First() (*model.InvitedUser, error)
	Take() (*model.InvitedUser, error)
	Last() (*model.InvitedUser, error)
	Find() ([]*model.InvitedUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InvitedUser, err error)
	FindInBatches(result *[]*model.InvitedUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InvitedUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInvitedUserDo
	Assign(attrs ...field.AssignExpr) IInvitedUserDo
	Joins(fields ...field.RelationField) IInvitedUserDo
	Preload(fields ...field.RelationField) IInvitedUserDo
	FirstOrInit() (*model.InvitedUser, error)
	FirstOrCreate() (*model.InvitedUser, error)
	FindByPage(offset int, limit int) (result []*model.InvitedUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInvitedUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i invitedUserDo) Debug() IInvitedUserDo {
	return i.withDO(i.DO.Debug())
}

func (i invitedUserDo) WithContext(ctx context.Context) IInvitedUserDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i invitedUserDo) ReadDB() IInvitedUserDo {
	return i.Clauses(dbresolver.Read)
}

func (i invitedUserDo) WriteDB() IInvitedUserDo {
	return i.Clauses(dbresolver.Write)
}

func (i invitedUserDo) Session(config *gorm.Session) IInvitedUserDo {
	return i.withDO(i.DO.Session(config))
}

func (i invitedUserDo) Clauses(conds ...clause.Expression) IInvitedUserDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i invitedUserDo) Returning(value interface{}, columns ...string) IInvitedUserDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i invitedUserDo) Not(conds ...gen.Condition) IInvitedUserDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i invitedUserDo) Or(conds ...gen.Condition) IInvitedUserDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i invitedUserDo) Select(conds ...field.Expr) IInvitedUserDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i invitedUserDo) Where(conds ...gen.Condition) IInvitedUserDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i invitedUserDo) Order(conds ...field.Expr) IInvitedUserDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i invitedUserDo) Distinct(cols ...field.Expr) IInvitedUserDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i invitedUserDo) Omit(cols ...field.Expr) IInvitedUserDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i invitedUserDo) Join(table schema.Tabler, on ...field.Expr) IInvitedUserDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i invitedUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInvitedUserDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i invitedUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IInvitedUserDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i invitedUserDo) Group(cols ...field.Expr) IInvitedUserDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i invitedUserDo) Having(conds ...gen.Condition) IInvitedUserDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i invitedUserDo) Limit(limit int) IInvitedUserDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i invitedUserDo) Offset(offset int) IInvitedUserDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i invitedUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInvitedUserDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i invitedUserDo) Unscoped() IInvitedUserDo {
	return i.withDO(i.DO.Unscoped())
}

func (i invitedUserDo) Create(values ...*model.InvitedUser) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i invitedUserDo) CreateInBatches(values []*model.InvitedUser, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i invitedUserDo) Save(values ...*model.InvitedUser) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i invitedUserDo) First() (*model.InvitedUser, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvitedUser), nil
	}
}

func (i invitedUserDo) Take() (*model.InvitedUser, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvitedUser), nil
	}
}

func (i invitedUserDo) Last() (*model.InvitedUser, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvitedUser), nil
	}
}

func (i invitedUserDo) Find() ([]*model.InvitedUser, error) {
	result, err := i.DO.Find()
	return result.([]*model.InvitedUser), err
}

func (i invitedUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InvitedUser, err error) {
	buf := make([]*model.InvitedUser, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i invitedUserDo) FindInBatches(result *[]*model.InvitedUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i invitedUserDo) Attrs(attrs ...field.AssignExpr) IInvitedUserDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i invitedUserDo) Assign(attrs ...field.AssignExpr) IInvitedUserDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i invitedUserDo) Joins(fields ...field.RelationField) IInvitedUserDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i invitedUserDo) Preload(fields ...field.RelationField) IInvitedUserDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i invitedUserDo) FirstOrInit() (*model.InvitedUser, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvitedUser), nil
	}
}

func (i invitedUserDo) FirstOrCreate() (*model.InvitedUser, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvitedUser), nil
	}
}

func (i invitedUserDo) FindByPage(offset int, limit int) (result []*model.InvitedUser, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i invitedUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i invitedUserDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i invitedUserDo) Delete(models ...*model.InvitedUser) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *invitedUserDo) withDO(do gen.Dao) *invitedUserDo {
	i.DO = *do.(*gen.DO)
	return i
}

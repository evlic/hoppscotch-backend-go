// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"model"
)

func newTeamCollection(db *gorm.DB, opts ...gen.DOOption) teamCollection {
	_teamCollection := teamCollection{}

	_teamCollection.teamCollectionDo.UseDB(db, opts...)
	_teamCollection.teamCollectionDo.UseModel(&model.TeamCollection{})

	tableName := _teamCollection.teamCollectionDo.TableName()
	_teamCollection.ALL = field.NewAsterisk(tableName)
	_teamCollection.ID = field.NewString(tableName, "id")
	_teamCollection.ParentID = field.NewString(tableName, "parentID")
	_teamCollection.TeamID = field.NewString(tableName, "teamID")
	_teamCollection.Title = field.NewString(tableName, "title")
	_teamCollection.OrderIndex = field.NewInt32(tableName, "orderIndex")
	_teamCollection.CreatedOn = field.NewTime(tableName, "createdOn")
	_teamCollection.UpdatedOn = field.NewTime(tableName, "updatedOn")
	_teamCollection.Data = field.NewField(tableName, "data")

	_teamCollection.fillFieldMap()

	return _teamCollection
}

type teamCollection struct {
	teamCollectionDo

	ALL        field.Asterisk
	ID         field.String
	ParentID   field.String
	TeamID     field.String
	Title      field.String
	OrderIndex field.Int32
	CreatedOn  field.Time
	UpdatedOn  field.Time
	Data       field.Field

	fieldMap map[string]field.Expr
}

func (t teamCollection) Table(newTableName string) *teamCollection {
	t.teamCollectionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teamCollection) As(alias string) *teamCollection {
	t.teamCollectionDo.DO = *(t.teamCollectionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teamCollection) updateTableName(table string) *teamCollection {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.ParentID = field.NewString(table, "parentID")
	t.TeamID = field.NewString(table, "teamID")
	t.Title = field.NewString(table, "title")
	t.OrderIndex = field.NewInt32(table, "orderIndex")
	t.CreatedOn = field.NewTime(table, "createdOn")
	t.UpdatedOn = field.NewTime(table, "updatedOn")
	t.Data = field.NewField(table, "data")

	t.fillFieldMap()

	return t
}

func (t *teamCollection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teamCollection) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["parentID"] = t.ParentID
	t.fieldMap["teamID"] = t.TeamID
	t.fieldMap["title"] = t.Title
	t.fieldMap["orderIndex"] = t.OrderIndex
	t.fieldMap["createdOn"] = t.CreatedOn
	t.fieldMap["updatedOn"] = t.UpdatedOn
	t.fieldMap["data"] = t.Data
}

func (t teamCollection) clone(db *gorm.DB) teamCollection {
	t.teamCollectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teamCollection) replaceDB(db *gorm.DB) teamCollection {
	t.teamCollectionDo.ReplaceDB(db)
	return t
}

type teamCollectionDo struct{ gen.DO }

type ITeamCollectionDo interface {
	gen.SubQuery
	Debug() ITeamCollectionDo
	WithContext(ctx context.Context) ITeamCollectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeamCollectionDo
	WriteDB() ITeamCollectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeamCollectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeamCollectionDo
	Not(conds ...gen.Condition) ITeamCollectionDo
	Or(conds ...gen.Condition) ITeamCollectionDo
	Select(conds ...field.Expr) ITeamCollectionDo
	Where(conds ...gen.Condition) ITeamCollectionDo
	Order(conds ...field.Expr) ITeamCollectionDo
	Distinct(cols ...field.Expr) ITeamCollectionDo
	Omit(cols ...field.Expr) ITeamCollectionDo
	Join(table schema.Tabler, on ...field.Expr) ITeamCollectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeamCollectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeamCollectionDo
	Group(cols ...field.Expr) ITeamCollectionDo
	Having(conds ...gen.Condition) ITeamCollectionDo
	Limit(limit int) ITeamCollectionDo
	Offset(offset int) ITeamCollectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamCollectionDo
	Unscoped() ITeamCollectionDo
	Create(values ...*model.TeamCollection) error
	CreateInBatches(values []*model.TeamCollection, batchSize int) error
	Save(values ...*model.TeamCollection) error
	First() (*model.TeamCollection, error)
	Take() (*model.TeamCollection, error)
	Last() (*model.TeamCollection, error)
	Find() ([]*model.TeamCollection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeamCollection, err error)
	FindInBatches(result *[]*model.TeamCollection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TeamCollection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeamCollectionDo
	Assign(attrs ...field.AssignExpr) ITeamCollectionDo
	Joins(fields ...field.RelationField) ITeamCollectionDo
	Preload(fields ...field.RelationField) ITeamCollectionDo
	FirstOrInit() (*model.TeamCollection, error)
	FirstOrCreate() (*model.TeamCollection, error)
	FindByPage(offset int, limit int) (result []*model.TeamCollection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeamCollectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teamCollectionDo) Debug() ITeamCollectionDo {
	return t.withDO(t.DO.Debug())
}

func (t teamCollectionDo) WithContext(ctx context.Context) ITeamCollectionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teamCollectionDo) ReadDB() ITeamCollectionDo {
	return t.Clauses(dbresolver.Read)
}

func (t teamCollectionDo) WriteDB() ITeamCollectionDo {
	return t.Clauses(dbresolver.Write)
}

func (t teamCollectionDo) Session(config *gorm.Session) ITeamCollectionDo {
	return t.withDO(t.DO.Session(config))
}

func (t teamCollectionDo) Clauses(conds ...clause.Expression) ITeamCollectionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teamCollectionDo) Returning(value interface{}, columns ...string) ITeamCollectionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teamCollectionDo) Not(conds ...gen.Condition) ITeamCollectionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teamCollectionDo) Or(conds ...gen.Condition) ITeamCollectionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teamCollectionDo) Select(conds ...field.Expr) ITeamCollectionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teamCollectionDo) Where(conds ...gen.Condition) ITeamCollectionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teamCollectionDo) Order(conds ...field.Expr) ITeamCollectionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teamCollectionDo) Distinct(cols ...field.Expr) ITeamCollectionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teamCollectionDo) Omit(cols ...field.Expr) ITeamCollectionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teamCollectionDo) Join(table schema.Tabler, on ...field.Expr) ITeamCollectionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teamCollectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeamCollectionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teamCollectionDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeamCollectionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teamCollectionDo) Group(cols ...field.Expr) ITeamCollectionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teamCollectionDo) Having(conds ...gen.Condition) ITeamCollectionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teamCollectionDo) Limit(limit int) ITeamCollectionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teamCollectionDo) Offset(offset int) ITeamCollectionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teamCollectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamCollectionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teamCollectionDo) Unscoped() ITeamCollectionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teamCollectionDo) Create(values ...*model.TeamCollection) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teamCollectionDo) CreateInBatches(values []*model.TeamCollection, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teamCollectionDo) Save(values ...*model.TeamCollection) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teamCollectionDo) First() (*model.TeamCollection, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamCollection), nil
	}
}

func (t teamCollectionDo) Take() (*model.TeamCollection, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamCollection), nil
	}
}

func (t teamCollectionDo) Last() (*model.TeamCollection, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamCollection), nil
	}
}

func (t teamCollectionDo) Find() ([]*model.TeamCollection, error) {
	result, err := t.DO.Find()
	return result.([]*model.TeamCollection), err
}

func (t teamCollectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeamCollection, err error) {
	buf := make([]*model.TeamCollection, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teamCollectionDo) FindInBatches(result *[]*model.TeamCollection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teamCollectionDo) Attrs(attrs ...field.AssignExpr) ITeamCollectionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teamCollectionDo) Assign(attrs ...field.AssignExpr) ITeamCollectionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teamCollectionDo) Joins(fields ...field.RelationField) ITeamCollectionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teamCollectionDo) Preload(fields ...field.RelationField) ITeamCollectionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teamCollectionDo) FirstOrInit() (*model.TeamCollection, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamCollection), nil
	}
}

func (t teamCollectionDo) FirstOrCreate() (*model.TeamCollection, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamCollection), nil
	}
}

func (t teamCollectionDo) FindByPage(offset int, limit int) (result []*model.TeamCollection, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teamCollectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teamCollectionDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teamCollectionDo) Delete(models ...*model.TeamCollection) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teamCollectionDo) withDO(do gen.Dao) *teamCollectionDo {
	t.DO = *do.(*gen.DO)
	return t
}

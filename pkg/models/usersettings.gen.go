// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"model"
)

func newUserSetting(db *gorm.DB, opts ...gen.DOOption) userSetting {
	_userSetting := userSetting{}

	_userSetting.userSettingDo.UseDB(db, opts...)
	_userSetting.userSettingDo.UseModel(&model.UserSetting{})

	tableName := _userSetting.userSettingDo.TableName()
	_userSetting.ALL = field.NewAsterisk(tableName)
	_userSetting.ID = field.NewString(tableName, "id")
	_userSetting.UserUID = field.NewString(tableName, "userUid")
	_userSetting.Properties = field.NewField(tableName, "properties")
	_userSetting.UpdatedOn = field.NewTime(tableName, "updatedOn")

	_userSetting.fillFieldMap()

	return _userSetting
}

type userSetting struct {
	userSettingDo

	ALL        field.Asterisk
	ID         field.String
	UserUID    field.String
	Properties field.Field
	UpdatedOn  field.Time

	fieldMap map[string]field.Expr
}

func (u userSetting) Table(newTableName string) *userSetting {
	u.userSettingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSetting) As(alias string) *userSetting {
	u.userSettingDo.DO = *(u.userSettingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSetting) updateTableName(table string) *userSetting {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewString(table, "id")
	u.UserUID = field.NewString(table, "userUid")
	u.Properties = field.NewField(table, "properties")
	u.UpdatedOn = field.NewTime(table, "updatedOn")

	u.fillFieldMap()

	return u
}

func (u *userSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSetting) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["userUid"] = u.UserUID
	u.fieldMap["properties"] = u.Properties
	u.fieldMap["updatedOn"] = u.UpdatedOn
}

func (u userSetting) clone(db *gorm.DB) userSetting {
	u.userSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSetting) replaceDB(db *gorm.DB) userSetting {
	u.userSettingDo.ReplaceDB(db)
	return u
}

type userSettingDo struct{ gen.DO }

type IUserSettingDo interface {
	gen.SubQuery
	Debug() IUserSettingDo
	WithContext(ctx context.Context) IUserSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSettingDo
	WriteDB() IUserSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserSettingDo
	Not(conds ...gen.Condition) IUserSettingDo
	Or(conds ...gen.Condition) IUserSettingDo
	Select(conds ...field.Expr) IUserSettingDo
	Where(conds ...gen.Condition) IUserSettingDo
	Order(conds ...field.Expr) IUserSettingDo
	Distinct(cols ...field.Expr) IUserSettingDo
	Omit(cols ...field.Expr) IUserSettingDo
	Join(table schema.Tabler, on ...field.Expr) IUserSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSettingDo
	Group(cols ...field.Expr) IUserSettingDo
	Having(conds ...gen.Condition) IUserSettingDo
	Limit(limit int) IUserSettingDo
	Offset(offset int) IUserSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSettingDo
	Unscoped() IUserSettingDo
	Create(values ...*model.UserSetting) error
	CreateInBatches(values []*model.UserSetting, batchSize int) error
	Save(values ...*model.UserSetting) error
	First() (*model.UserSetting, error)
	Take() (*model.UserSetting, error)
	Last() (*model.UserSetting, error)
	Find() ([]*model.UserSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSetting, err error)
	FindInBatches(result *[]*model.UserSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSettingDo
	Assign(attrs ...field.AssignExpr) IUserSettingDo
	Joins(fields ...field.RelationField) IUserSettingDo
	Preload(fields ...field.RelationField) IUserSettingDo
	FirstOrInit() (*model.UserSetting, error)
	FirstOrCreate() (*model.UserSetting, error)
	FindByPage(offset int, limit int) (result []*model.UserSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userSettingDo) Debug() IUserSettingDo {
	return u.withDO(u.DO.Debug())
}

func (u userSettingDo) WithContext(ctx context.Context) IUserSettingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSettingDo) ReadDB() IUserSettingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSettingDo) WriteDB() IUserSettingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSettingDo) Session(config *gorm.Session) IUserSettingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSettingDo) Clauses(conds ...clause.Expression) IUserSettingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSettingDo) Returning(value interface{}, columns ...string) IUserSettingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSettingDo) Not(conds ...gen.Condition) IUserSettingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSettingDo) Or(conds ...gen.Condition) IUserSettingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSettingDo) Select(conds ...field.Expr) IUserSettingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSettingDo) Where(conds ...gen.Condition) IUserSettingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSettingDo) Order(conds ...field.Expr) IUserSettingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSettingDo) Distinct(cols ...field.Expr) IUserSettingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSettingDo) Omit(cols ...field.Expr) IUserSettingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSettingDo) Join(table schema.Tabler, on ...field.Expr) IUserSettingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSettingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserSettingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSettingDo) Group(cols ...field.Expr) IUserSettingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSettingDo) Having(conds ...gen.Condition) IUserSettingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSettingDo) Limit(limit int) IUserSettingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSettingDo) Offset(offset int) IUserSettingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSettingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSettingDo) Unscoped() IUserSettingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSettingDo) Create(values ...*model.UserSetting) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSettingDo) CreateInBatches(values []*model.UserSetting, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSettingDo) Save(values ...*model.UserSetting) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSettingDo) First() (*model.UserSetting, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSetting), nil
	}
}

func (u userSettingDo) Take() (*model.UserSetting, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSetting), nil
	}
}

func (u userSettingDo) Last() (*model.UserSetting, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSetting), nil
	}
}

func (u userSettingDo) Find() ([]*model.UserSetting, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSetting), err
}

func (u userSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSetting, err error) {
	buf := make([]*model.UserSetting, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSettingDo) FindInBatches(result *[]*model.UserSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSettingDo) Attrs(attrs ...field.AssignExpr) IUserSettingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSettingDo) Assign(attrs ...field.AssignExpr) IUserSettingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSettingDo) Joins(fields ...field.RelationField) IUserSettingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSettingDo) Preload(fields ...field.RelationField) IUserSettingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSettingDo) FirstOrInit() (*model.UserSetting, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSetting), nil
	}
}

func (u userSettingDo) FirstOrCreate() (*model.UserSetting, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSetting), nil
	}
}

func (u userSettingDo) FindByPage(offset int, limit int) (result []*model.UserSetting, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSettingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSettingDo) Delete(models ...*model.UserSetting) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSettingDo) withDO(do gen.Dao) *userSettingDo {
	u.DO = *do.(*gen.DO)
	return u
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"model"
)

func newInfraConfig(db *gorm.DB, opts ...gen.DOOption) infraConfig {
	_infraConfig := infraConfig{}

	_infraConfig.infraConfigDo.UseDB(db, opts...)
	_infraConfig.infraConfigDo.UseModel(&model.InfraConfig{})

	tableName := _infraConfig.infraConfigDo.TableName()
	_infraConfig.ALL = field.NewAsterisk(tableName)
	_infraConfig.ID = field.NewString(tableName, "id")
	_infraConfig.Name = field.NewString(tableName, "name")
	_infraConfig.Value = field.NewString(tableName, "value")
	_infraConfig.Active = field.NewBool(tableName, "active")
	_infraConfig.CreatedOn = field.NewTime(tableName, "createdOn")
	_infraConfig.UpdatedOn = field.NewTime(tableName, "updatedOn")

	_infraConfig.fillFieldMap()

	return _infraConfig
}

type infraConfig struct {
	infraConfigDo

	ALL       field.Asterisk
	ID        field.String
	Name      field.String
	Value     field.String
	Active    field.Bool
	CreatedOn field.Time
	UpdatedOn field.Time

	fieldMap map[string]field.Expr
}

func (i infraConfig) Table(newTableName string) *infraConfig {
	i.infraConfigDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i infraConfig) As(alias string) *infraConfig {
	i.infraConfigDo.DO = *(i.infraConfigDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *infraConfig) updateTableName(table string) *infraConfig {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.Name = field.NewString(table, "name")
	i.Value = field.NewString(table, "value")
	i.Active = field.NewBool(table, "active")
	i.CreatedOn = field.NewTime(table, "createdOn")
	i.UpdatedOn = field.NewTime(table, "updatedOn")

	i.fillFieldMap()

	return i
}

func (i *infraConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *infraConfig) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 6)
	i.fieldMap["id"] = i.ID
	i.fieldMap["name"] = i.Name
	i.fieldMap["value"] = i.Value
	i.fieldMap["active"] = i.Active
	i.fieldMap["createdOn"] = i.CreatedOn
	i.fieldMap["updatedOn"] = i.UpdatedOn
}

func (i infraConfig) clone(db *gorm.DB) infraConfig {
	i.infraConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i infraConfig) replaceDB(db *gorm.DB) infraConfig {
	i.infraConfigDo.ReplaceDB(db)
	return i
}

type infraConfigDo struct{ gen.DO }

type IInfraConfigDo interface {
	gen.SubQuery
	Debug() IInfraConfigDo
	WithContext(ctx context.Context) IInfraConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInfraConfigDo
	WriteDB() IInfraConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInfraConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInfraConfigDo
	Not(conds ...gen.Condition) IInfraConfigDo
	Or(conds ...gen.Condition) IInfraConfigDo
	Select(conds ...field.Expr) IInfraConfigDo
	Where(conds ...gen.Condition) IInfraConfigDo
	Order(conds ...field.Expr) IInfraConfigDo
	Distinct(cols ...field.Expr) IInfraConfigDo
	Omit(cols ...field.Expr) IInfraConfigDo
	Join(table schema.Tabler, on ...field.Expr) IInfraConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInfraConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInfraConfigDo
	Group(cols ...field.Expr) IInfraConfigDo
	Having(conds ...gen.Condition) IInfraConfigDo
	Limit(limit int) IInfraConfigDo
	Offset(offset int) IInfraConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInfraConfigDo
	Unscoped() IInfraConfigDo
	Create(values ...*model.InfraConfig) error
	CreateInBatches(values []*model.InfraConfig, batchSize int) error
	Save(values ...*model.InfraConfig) error
	First() (*model.InfraConfig, error)
	Take() (*model.InfraConfig, error)
	Last() (*model.InfraConfig, error)
	Find() ([]*model.InfraConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InfraConfig, err error)
	FindInBatches(result *[]*model.InfraConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InfraConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInfraConfigDo
	Assign(attrs ...field.AssignExpr) IInfraConfigDo
	Joins(fields ...field.RelationField) IInfraConfigDo
	Preload(fields ...field.RelationField) IInfraConfigDo
	FirstOrInit() (*model.InfraConfig, error)
	FirstOrCreate() (*model.InfraConfig, error)
	FindByPage(offset int, limit int) (result []*model.InfraConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInfraConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i infraConfigDo) Debug() IInfraConfigDo {
	return i.withDO(i.DO.Debug())
}

func (i infraConfigDo) WithContext(ctx context.Context) IInfraConfigDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i infraConfigDo) ReadDB() IInfraConfigDo {
	return i.Clauses(dbresolver.Read)
}

func (i infraConfigDo) WriteDB() IInfraConfigDo {
	return i.Clauses(dbresolver.Write)
}

func (i infraConfigDo) Session(config *gorm.Session) IInfraConfigDo {
	return i.withDO(i.DO.Session(config))
}

func (i infraConfigDo) Clauses(conds ...clause.Expression) IInfraConfigDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i infraConfigDo) Returning(value interface{}, columns ...string) IInfraConfigDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i infraConfigDo) Not(conds ...gen.Condition) IInfraConfigDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i infraConfigDo) Or(conds ...gen.Condition) IInfraConfigDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i infraConfigDo) Select(conds ...field.Expr) IInfraConfigDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i infraConfigDo) Where(conds ...gen.Condition) IInfraConfigDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i infraConfigDo) Order(conds ...field.Expr) IInfraConfigDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i infraConfigDo) Distinct(cols ...field.Expr) IInfraConfigDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i infraConfigDo) Omit(cols ...field.Expr) IInfraConfigDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i infraConfigDo) Join(table schema.Tabler, on ...field.Expr) IInfraConfigDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i infraConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInfraConfigDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i infraConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IInfraConfigDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i infraConfigDo) Group(cols ...field.Expr) IInfraConfigDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i infraConfigDo) Having(conds ...gen.Condition) IInfraConfigDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i infraConfigDo) Limit(limit int) IInfraConfigDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i infraConfigDo) Offset(offset int) IInfraConfigDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i infraConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInfraConfigDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i infraConfigDo) Unscoped() IInfraConfigDo {
	return i.withDO(i.DO.Unscoped())
}

func (i infraConfigDo) Create(values ...*model.InfraConfig) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i infraConfigDo) CreateInBatches(values []*model.InfraConfig, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i infraConfigDo) Save(values ...*model.InfraConfig) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i infraConfigDo) First() (*model.InfraConfig, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InfraConfig), nil
	}
}

func (i infraConfigDo) Take() (*model.InfraConfig, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InfraConfig), nil
	}
}

func (i infraConfigDo) Last() (*model.InfraConfig, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InfraConfig), nil
	}
}

func (i infraConfigDo) Find() ([]*model.InfraConfig, error) {
	result, err := i.DO.Find()
	return result.([]*model.InfraConfig), err
}

func (i infraConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InfraConfig, err error) {
	buf := make([]*model.InfraConfig, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i infraConfigDo) FindInBatches(result *[]*model.InfraConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i infraConfigDo) Attrs(attrs ...field.AssignExpr) IInfraConfigDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i infraConfigDo) Assign(attrs ...field.AssignExpr) IInfraConfigDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i infraConfigDo) Joins(fields ...field.RelationField) IInfraConfigDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i infraConfigDo) Preload(fields ...field.RelationField) IInfraConfigDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i infraConfigDo) FirstOrInit() (*model.InfraConfig, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InfraConfig), nil
	}
}

func (i infraConfigDo) FirstOrCreate() (*model.InfraConfig, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InfraConfig), nil
	}
}

func (i infraConfigDo) FindByPage(offset int, limit int) (result []*model.InfraConfig, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i infraConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i infraConfigDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i infraConfigDo) Delete(models ...*model.InfraConfig) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *infraConfigDo) withDO(do gen.Dao) *infraConfigDo {
	i.DO = *do.(*gen.DO)
	return i
}

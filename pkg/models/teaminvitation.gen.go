// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"model"
)

func newTeamInvitation(db *gorm.DB, opts ...gen.DOOption) teamInvitation {
	_teamInvitation := teamInvitation{}

	_teamInvitation.teamInvitationDo.UseDB(db, opts...)
	_teamInvitation.teamInvitationDo.UseModel(&model.TeamInvitation{})

	tableName := _teamInvitation.teamInvitationDo.TableName()
	_teamInvitation.ALL = field.NewAsterisk(tableName)
	_teamInvitation.ID = field.NewString(tableName, "id")
	_teamInvitation.TeamID = field.NewString(tableName, "teamID")
	_teamInvitation.CreatorUID = field.NewString(tableName, "creatorUid")
	_teamInvitation.InviteeEmail = field.NewString(tableName, "inviteeEmail")
	_teamInvitation.InviteeRole = field.NewField(tableName, "inviteeRole")

	_teamInvitation.fillFieldMap()

	return _teamInvitation
}

type teamInvitation struct {
	teamInvitationDo

	ALL          field.Asterisk
	ID           field.String
	TeamID       field.String
	CreatorUID   field.String
	InviteeEmail field.String
	InviteeRole  field.Field

	fieldMap map[string]field.Expr
}

func (t teamInvitation) Table(newTableName string) *teamInvitation {
	t.teamInvitationDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t teamInvitation) As(alias string) *teamInvitation {
	t.teamInvitationDo.DO = *(t.teamInvitationDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *teamInvitation) updateTableName(table string) *teamInvitation {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.TeamID = field.NewString(table, "teamID")
	t.CreatorUID = field.NewString(table, "creatorUid")
	t.InviteeEmail = field.NewString(table, "inviteeEmail")
	t.InviteeRole = field.NewField(table, "inviteeRole")

	t.fillFieldMap()

	return t
}

func (t *teamInvitation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *teamInvitation) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id"] = t.ID
	t.fieldMap["teamID"] = t.TeamID
	t.fieldMap["creatorUid"] = t.CreatorUID
	t.fieldMap["inviteeEmail"] = t.InviteeEmail
	t.fieldMap["inviteeRole"] = t.InviteeRole
}

func (t teamInvitation) clone(db *gorm.DB) teamInvitation {
	t.teamInvitationDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t teamInvitation) replaceDB(db *gorm.DB) teamInvitation {
	t.teamInvitationDo.ReplaceDB(db)
	return t
}

type teamInvitationDo struct{ gen.DO }

type ITeamInvitationDo interface {
	gen.SubQuery
	Debug() ITeamInvitationDo
	WithContext(ctx context.Context) ITeamInvitationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITeamInvitationDo
	WriteDB() ITeamInvitationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITeamInvitationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITeamInvitationDo
	Not(conds ...gen.Condition) ITeamInvitationDo
	Or(conds ...gen.Condition) ITeamInvitationDo
	Select(conds ...field.Expr) ITeamInvitationDo
	Where(conds ...gen.Condition) ITeamInvitationDo
	Order(conds ...field.Expr) ITeamInvitationDo
	Distinct(cols ...field.Expr) ITeamInvitationDo
	Omit(cols ...field.Expr) ITeamInvitationDo
	Join(table schema.Tabler, on ...field.Expr) ITeamInvitationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITeamInvitationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITeamInvitationDo
	Group(cols ...field.Expr) ITeamInvitationDo
	Having(conds ...gen.Condition) ITeamInvitationDo
	Limit(limit int) ITeamInvitationDo
	Offset(offset int) ITeamInvitationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamInvitationDo
	Unscoped() ITeamInvitationDo
	Create(values ...*model.TeamInvitation) error
	CreateInBatches(values []*model.TeamInvitation, batchSize int) error
	Save(values ...*model.TeamInvitation) error
	First() (*model.TeamInvitation, error)
	Take() (*model.TeamInvitation, error)
	Last() (*model.TeamInvitation, error)
	Find() ([]*model.TeamInvitation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeamInvitation, err error)
	FindInBatches(result *[]*model.TeamInvitation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TeamInvitation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITeamInvitationDo
	Assign(attrs ...field.AssignExpr) ITeamInvitationDo
	Joins(fields ...field.RelationField) ITeamInvitationDo
	Preload(fields ...field.RelationField) ITeamInvitationDo
	FirstOrInit() (*model.TeamInvitation, error)
	FirstOrCreate() (*model.TeamInvitation, error)
	FindByPage(offset int, limit int) (result []*model.TeamInvitation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITeamInvitationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t teamInvitationDo) Debug() ITeamInvitationDo {
	return t.withDO(t.DO.Debug())
}

func (t teamInvitationDo) WithContext(ctx context.Context) ITeamInvitationDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t teamInvitationDo) ReadDB() ITeamInvitationDo {
	return t.Clauses(dbresolver.Read)
}

func (t teamInvitationDo) WriteDB() ITeamInvitationDo {
	return t.Clauses(dbresolver.Write)
}

func (t teamInvitationDo) Session(config *gorm.Session) ITeamInvitationDo {
	return t.withDO(t.DO.Session(config))
}

func (t teamInvitationDo) Clauses(conds ...clause.Expression) ITeamInvitationDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t teamInvitationDo) Returning(value interface{}, columns ...string) ITeamInvitationDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t teamInvitationDo) Not(conds ...gen.Condition) ITeamInvitationDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t teamInvitationDo) Or(conds ...gen.Condition) ITeamInvitationDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t teamInvitationDo) Select(conds ...field.Expr) ITeamInvitationDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t teamInvitationDo) Where(conds ...gen.Condition) ITeamInvitationDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t teamInvitationDo) Order(conds ...field.Expr) ITeamInvitationDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t teamInvitationDo) Distinct(cols ...field.Expr) ITeamInvitationDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t teamInvitationDo) Omit(cols ...field.Expr) ITeamInvitationDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t teamInvitationDo) Join(table schema.Tabler, on ...field.Expr) ITeamInvitationDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t teamInvitationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITeamInvitationDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t teamInvitationDo) RightJoin(table schema.Tabler, on ...field.Expr) ITeamInvitationDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t teamInvitationDo) Group(cols ...field.Expr) ITeamInvitationDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t teamInvitationDo) Having(conds ...gen.Condition) ITeamInvitationDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t teamInvitationDo) Limit(limit int) ITeamInvitationDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t teamInvitationDo) Offset(offset int) ITeamInvitationDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t teamInvitationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITeamInvitationDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t teamInvitationDo) Unscoped() ITeamInvitationDo {
	return t.withDO(t.DO.Unscoped())
}

func (t teamInvitationDo) Create(values ...*model.TeamInvitation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t teamInvitationDo) CreateInBatches(values []*model.TeamInvitation, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t teamInvitationDo) Save(values ...*model.TeamInvitation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t teamInvitationDo) First() (*model.TeamInvitation, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamInvitation), nil
	}
}

func (t teamInvitationDo) Take() (*model.TeamInvitation, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamInvitation), nil
	}
}

func (t teamInvitationDo) Last() (*model.TeamInvitation, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamInvitation), nil
	}
}

func (t teamInvitationDo) Find() ([]*model.TeamInvitation, error) {
	result, err := t.DO.Find()
	return result.([]*model.TeamInvitation), err
}

func (t teamInvitationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TeamInvitation, err error) {
	buf := make([]*model.TeamInvitation, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t teamInvitationDo) FindInBatches(result *[]*model.TeamInvitation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t teamInvitationDo) Attrs(attrs ...field.AssignExpr) ITeamInvitationDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t teamInvitationDo) Assign(attrs ...field.AssignExpr) ITeamInvitationDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t teamInvitationDo) Joins(fields ...field.RelationField) ITeamInvitationDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t teamInvitationDo) Preload(fields ...field.RelationField) ITeamInvitationDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t teamInvitationDo) FirstOrInit() (*model.TeamInvitation, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamInvitation), nil
	}
}

func (t teamInvitationDo) FirstOrCreate() (*model.TeamInvitation, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TeamInvitation), nil
	}
}

func (t teamInvitationDo) FindByPage(offset int, limit int) (result []*model.TeamInvitation, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t teamInvitationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t teamInvitationDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t teamInvitationDo) Delete(models ...*model.TeamInvitation) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *teamInvitationDo) withDO(do gen.Dao) *teamInvitationDo {
	t.DO = *do.(*gen.DO)
	return t
}

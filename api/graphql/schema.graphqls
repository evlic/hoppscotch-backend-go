directive @goField(
	forceResolver: Boolean
	name: String
	omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @isLogin on FIELD_DEFINITION
directive @isAdmin on FIELD_DEFINITION

type User {
  """UID of the user"""
  uid: ID!

  """Name of the user (if fetched)"""
  displayName: String

  """Email of the user"""
  email: String

  """URL to the profile photo of the user (if fetched)"""
  photoURL: String

  """Flag to determine if user is an Admin or not"""
  isAdmin: Boolean!

  """Date when the user account was created"""
  createdOn: DateTime!

  """Stringified current REST session for logged-in User"""
  currentRESTSession: String

  """Stringified current GraphQL session for logged-in User"""
  currentGQLSession: String

  """Returns user settings"""
  settings: UserSettings!

  """Returns a list of users personal environments"""
  environments: [UserEnvironment!]!

  """Returns the users global environments"""
  globalEnvironments: UserEnvironment!

  """Returns a users REST history"""
  RESTHistory(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [UserHistory!]!

  """Returns a users GraphQL history"""
  GQLHistory(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [UserHistory!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserSettings {
  """ID of the User Setting"""
  id: ID!

  """ID of the user this setting belongs to"""
  userUid: ID!

  """Stringified JSON settings object"""
  properties: String!

  """Last updated on"""
  updatedOn: DateTime!
}

type UserEnvironment {
  """ID of the User Environment"""
  id: ID!

  """ID of the user this environment belongs to"""
  userUid: ID!

  """Name of the environment"""
  name: String

  """All variables present in the environment"""
  variables: String!

  """Flag to indicate the environment is global or not"""
  isGlobal: Boolean!
}

type UserCollection {
  """ID of the user collection"""
  id: ID!

  """Displayed title of the user collection"""
  title: String!

  """JSON string representing the collection data"""
  data: String

  """Type of the user collection"""
  type: ReqType!

  """Returns user requests of a user collection"""
  requests(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [UserRequest!]!

  """User the collection belongs to"""
  user: User!

  """Parent user collection (null if root)"""
  parent: UserCollection

  """List of children REST user collection"""
  childrenREST(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [UserCollection!]!

  """List of children GraphQL user collection"""
  childrenGQL(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [UserCollection!]!
}

enum ReqType {
  REST
  GQL
}

type UserCollectionReorderData {
  """User Collection being moved"""
  userCollection: UserCollection!

  """
  User Collection succeeding the collection being moved in its new position
  """
  nextUserCollection: UserCollection
}

type UserCollectionRemovedData {
  """ID of User Collection being removed"""
  id: ID!

  """Type of the user collection"""
  type: ReqType!
}

type UserCollectionExportJSONData {
  """Stringified contents of the collection"""
  exportedCollection: ID!

  """Type of the user collection"""
  collectionType: ReqType!
}

type UserRequest {
  """ID of the user request"""
  id: ID!

  """ID of the parent collection ID"""
  collectionID: ID!

  """Title of the user request"""
  title: String!

  """Content/Body of the user request"""
  request: String!

  """Type (GRAPHQL/REST) of the user request"""
  type: ReqType!

  """Date of the user request creation"""
  createdOn: DateTime!

  """Returns the user of the user request"""
  user: User!
}

type UserRequestReorderData {
  """User request being moved"""
  request: UserRequest!

  """User request succeeding the request being moved in its new position"""
  nextRequest: UserRequest
}

type UserHistory {
  """ID of the user request in history"""
  id: ID!

  """ID of the user this history belongs to"""
  userUid: ID!

  """Type of the request in the history"""
  reqType: ReqType!

  """JSON string representing the request data"""
  request: String!

  """JSON string representing the response meta-data"""
  responseMetadata: String!

  """If the request in the history starred"""
  isStarred: Boolean!

  """Timestamp of when the request was executed or history was created"""
  executedOn: DateTime!
}

type UserHistoryDeletedManyData {
  """Number of user histories deleted"""
  count: Int!

  """Type of the request in the history"""
  reqType: ReqType!
}

scalar Int64

type Team {
  """ID of the team"""
  id: ID!

  """Displayed name of the team"""
  name: String!

  """Returns the list of members of a team"""
  members(
    """The ID of the last returned team member entry (used for pagination)"""
    cursor: ID
  ): [TeamMember!]!

  """Returns the list of members of a team"""
  teamMembers: [TeamMember!]!

  """The role of the current user in the team"""
  myRole: TeamMemberRole

  """The number of users with the OWNER role in the team"""
  ownersCount: Int64!

  """The number of users with the EDITOR role in the team"""
  editorsCount: Int64!

  """The number of users with the VIEWER role in the team"""
  viewersCount: Int64!

  """Get all the active invites in the team"""
  teamInvitations: [TeamInvitation!]!

  """Returns all Team Environments for the given Team"""
  teamEnvironments: [TeamEnvironment!]!
}

enum TeamMemberRole {
  OWNER
  VIEWER
  EDITOR
}

type TeamMember {
  """Membership ID of the Team Member"""
  membershipID: ID!

  """Role of the given team member in the given team"""
  role: TeamMemberRole!
  user: User!
}

type TeamEnvironment {
  """ID of the Team Environment"""
  id: ID!

  """ID of the team this environment belongs to"""
  teamID: ID!

  """Name of the environment"""
  name: String!

  """All variables present in the environment"""
  variables: String!
}

type TeamCollection {
  """ID of the collection"""
  id: ID!

  """Displayed title of the collection"""
  title: String!

  """JSON string representing the collection data"""
  data: String

  """ID of the collection"""
  parentID: ID

  """Team the collection belongs to"""
  team: Team!

  """Return the parent Team Collection (null if root )"""
  parent: TeamCollection

  """List of children Team Collections"""
  children(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [TeamCollection!]!
}

type CollectionReorderData {
  """Team Collection being moved"""
  collection: TeamCollection!

  """
  Team Collection succeeding the collection being moved in its new position
  """
  nextCollection: TeamCollection
}

type TeamRequest {
  """ID of the request"""
  id: ID!

  """ID of the collection the request belongs to."""
  collectionID: ID!

  """ID of the team the request belongs to."""
  teamID: ID!

  """JSON string representing the request data"""
  request: String!

  """Displayed title of the request"""
  title: String!

  """Team the request belongs to"""
  team: Team!

  """Collection the request belongs to"""
  collection: TeamCollection!
}

type RequestReorderData {
  """Team Request being moved"""
  request: TeamRequest!

  """Team Request succeeding the request being moved in its new position"""
  nextRequest: TeamRequest
}

type TeamInvitation {
  """ID of the invite"""
  id: ID!

  """ID of the team the invite is to"""
  teamID: ID!

  """UID of the creator of the invite"""
  creatorUid: ID!

  """Email of the invitee"""
  inviteeEmail: String!

  """The role that will be given to the invitee"""
  inviteeRole: TeamMemberRole!

  """Get the team associated to the invite"""
  team: Team!

  """Get the creator of the invite"""
  creator: User!
}

type Admin {
  """UID of the user"""
  uid: ID!

  """Name of the user (if fetched)"""
  displayName: String

  """Email of the user"""
  email: String

  """URL to the profile photo of the user (if fetched)"""
  photoURL: String

  """Date when the user account was created"""
  createdOn: DateTime!

  """Returns a list of all admin users in infra"""
  admins: [User!]! @deprecated(reason: "Use `infra` query instead")

  """Returns a user info by UID"""
  userInfo(
    """The user UID"""
    userUid: ID!
  ): User! @deprecated(reason: "Use `infra` query instead")

  """Returns a list of all the users in infra"""
  allUsers(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [User!]! @deprecated(reason: "Use `infra` query instead")

  """Returns a list of all the invited users"""
  invitedUsers: [InvitedUser!]! @deprecated(reason: "Use `infra` query instead")

  """Returns a list of all the teams in the infra"""
  allTeams(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [Team!]! @deprecated(reason: "Use `infra` query instead")

  """Returns a team info by ID when requested by Admin"""
  teamInfo(
    """Team ID for which info to fetch"""
    teamID: ID!
  ): Team! @deprecated(reason: "Use `infra` query instead")

  """Return count of all the members in a team"""
  membersCountInTeam(
    """Team ID for which team members to fetch"""
    teamID: ID!
  ): Int! @deprecated(reason: "Use `infra` query instead")

  """Return count of all the stored collections in a team"""
  collectionCountInTeam(
    """Team ID for which team members to fetch"""
    teamID: ID!
  ): Int! @deprecated(reason: "Use `infra` query instead")

  """Return count of all the stored requests in a team"""
  requestCountInTeam(
    """Team ID for which team members to fetch"""
    teamID: ID!
  ): Int! @deprecated(reason: "Use `infra` query instead")

  """Return count of all the stored environments in a team"""
  environmentCountInTeam(
    """Team ID for which team members to fetch"""
    teamID: ID!
  ): Int! @deprecated(reason: "Use `infra` query instead")

  """Return all the pending invitations in a team"""
  pendingInvitationCountInTeam(
    """Team ID for which team members to fetch"""
    teamID: ID!
  ): [TeamInvitation!]! @deprecated(reason: "Use `infra` query instead")

  """Return total number of Users in organization"""
  usersCount: Int! @deprecated(reason: "Use `infra` query instead")

  """Return total number of Teams in organization"""
  teamsCount: Int! @deprecated(reason: "Use `infra` query instead")

  """Return total number of Team Collections in organization"""
  teamCollectionsCount: Int! @deprecated(reason: "Use `infra` query instead")

  """Return total number of Team Requests in organization"""
  teamRequestsCount: Int! @deprecated(reason: "Use `infra` query instead")
}

type InvitedUser {
  """Admin UID"""
  adminUid: ID!

  """Admin email"""
  adminEmail: String!

  """Invitee email"""
  inviteeEmail: String!

  """Date when the user invitation was sent"""
  invitedOn: DateTime!
}

type Infra {
  """Admin who executed the action"""
  executedBy: Admin!

  """Returns a list of all admin users in infra"""
  admins: [User!]!

  """Returns a user info by UID"""
  userInfo(
    """The user UID"""
    userUid: ID!
  ): User! @goField(forceResolver: true)

  """Returns a list of all the users in infra"""
  allUsers(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [User!]! @goField(forceResolver: true)

  """Returns a list of all the invited users"""
  invitedUsers: [InvitedUser!]!

  """Returns a list of all the teams in the infra"""
  allTeams(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [Team!]! @goField(forceResolver: true)

  """Returns a team info by ID when requested by Admin"""
  teamInfo(
    """Team ID for which info to fetch"""
    teamID: ID!
  ): Team! @goField(forceResolver: true)

  """Return count of all the members in a team"""
  membersCountInTeam(
    """Team ID for which team members to fetch"""
    teamID: ID!
  ): Int64! @goField(forceResolver: true)

  """Return count of all the stored collections in a team"""
  collectionCountInTeam(
    """Team ID for which team members to fetch"""
    teamID: ID!
  ): Int64! @goField(forceResolver: true)

  """Return count of all the stored requests in a team"""
  requestCountInTeam(
    """Team ID for which team members to fetch"""
    teamID: ID!
  ): Int64! @goField(forceResolver: true)

  """Return count of all the stored environments in a team"""
  environmentCountInTeam(
    """Team ID for which team members to fetch"""
    teamID: ID!
  ): Int64! @goField(forceResolver: true)

  """Return all the pending invitations in a team"""
  pendingInvitationCountInTeam(
    """Team ID for which team members to fetch"""
    teamID: ID!
  ): [TeamInvitation!]! @goField(forceResolver: true)

  """Return total number of Users in organization"""
  usersCount: Int64!

  """Return total number of Teams in organization"""
  teamsCount: Int64!

  """Return total number of Team Collections in organization"""
  teamCollectionsCount: Int64!

  """Return total number of Team Requests in organization"""
  teamRequestsCount: Int64!

  """Returns a list of all the shortcodes in the infra"""
  allShortcodes(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10

    """Users email to filter shortcodes by"""
    userEmail: String
  ): [ShortcodeWithUserEmail!]! @goField(forceResolver: true)
}

type Shortcode {
  """The 12 digit alphanumeric code"""
  id: ID!

  """JSON string representing the request data"""
  request: String!

  """JSON string representing the properties for an embed"""
  properties: String

  """Timestamp of when the Shortcode was created"""
  createdOn: DateTime!
}

type ShortcodeCreator {
  """Uid of user who created the shortcode"""
  uid: String!

  """Email of user who created the shortcode"""
  email: String!
}

type ShortcodeWithUserEmail {
  """The 12 digit alphanumeric code"""
  id: ID!

  """JSON string representing the request data"""
  request: String!

  """JSON string representing the properties for an embed"""
  properties: String

  """Timestamp of when the Shortcode was created"""
  createdOn: DateTime!

  """Details of user who created the shortcode"""
  creator: ShortcodeCreator
}

type InfraConfig {
  """Infra Config Name"""
  name: String!

  """Infra Config Value"""
  value: String!
}

type Query {
  """
  Gives details of the user executing this query (pass Authorization 'Bearer' header)
  """
  me: User! @isLogin

  """Fetch details of the Infrastructure"""
  infra: Infra! @isAdmin

  """Retrieve configuration details for the instance"""
  infraConfigs(
    """Configs to fetch"""
    configNames: [InfraConfigEnum!]!
  ): [InfraConfig!]! @isAdmin

  """Allowed Auth Provider list"""
  allowedAuthProviders: [String!]! @isAdmin

  """Gives details of the admin executing this query"""
  admin: Admin! @isAdmin

  """List of teams that the executing user belongs to."""
  myTeams(
    """The ID of the last returned team entry (used for pagination)"""
    cursor: ID
  ): [Team!]! @isLogin

  """Returns the detail of the team with the given ID"""
  team(
    """ID of the team to check"""
    teamID: ID!
  ): Team @isLogin

  """Gets the Team Invitation with the given ID, or null if not exists"""
  teamInvitation(
    """ID of the Team Invitation to lookup"""
    inviteID: ID!
  ): TeamInvitation! @isLogin

  """
  Returns the JSON string giving the collections and their contents of the team
  """
  exportCollectionsToJSON(
    """ID of the team"""
    teamID: ID!
  ): String! @isLogin

  """Returns the collections of a team"""
  rootCollectionsOfTeam(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10

    """ID of the team"""
    teamID: ID!
  ): [TeamCollection!]! @isLogin

  """Get a Team Collection with ID or null (if not exists)"""
  collection(
    """ID of the collection"""
    collectionID: ID!
  ): TeamCollection @isLogin

  """Search the team for a specific request with title"""
  searchForRequest(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10

    """ID of the team to look in"""
    teamID: ID!

    """The title to search for"""
    searchTerm: String!
  ): [TeamRequest!]! @isLogin

  """Gives a request with the given ID or null (if not exists)"""
  request(
    """ID of the request"""
    requestID: ID!
  ): TeamRequest @isLogin

  """Gives a paginated list of requests in the collection"""
  requestsInCollection(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10

    """ID of the collection to look in"""
    collectionID: ID!
  ): [TeamRequest!]! @isLogin

  """Resolves and returns a shortcode data"""
  shortcode(
    """The shortcode to resolve"""
    code: ID!
  ): Shortcode @isLogin

  """List all shortcodes the current user has generated"""
  myShortcodes(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [Shortcode!]! @isLogin

  """Get REST user requests"""
  userRESTRequests(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10

    """Collection ID of the user request"""
    collectionID: ID
  ): [UserRequest!]! @isLogin

  """Get GraphQL user requests"""
  userGQLRequests(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10

    """Collection ID of the user request"""
    collectionID: ID
  ): [UserRequest!]! @isLogin

  """Get a user request by ID"""
  userRequest(
    """ID of the user request"""
    id: ID!
  ): UserRequest! @isLogin

  """Get the root REST user collections for a user"""
  rootRESTUserCollections(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [UserCollection!]! @isLogin

  """Get the root GraphQL user collections for a user"""
  rootGQLUserCollections(
    """Cursor for pagination, ID of the last item in the list"""
    cursor: ID

    """Number of items to fetch"""
    take: Int = 10
  ): [UserCollection!]! @isLogin

  """Get user collection with ID"""
  userCollection(
    """ID of the user collection"""
    userCollectionID: ID!
  ): UserCollection! @isLogin

  """
  Returns the JSON string giving the collections and their contents of a user
  """
  exportUserCollectionsToJSON(
    """ID of the user collection"""
    collectionID: ID = null

    """Type of the user collection"""
    collectionType: ReqType!
  ): UserCollectionExportJSONData! @isLogin
}

enum InfraConfigEnum {
  MAILER_SMTP_URL
  MAILER_ADDRESS_FROM
  GOOGLE_CLIENT_ID
  GOOGLE_CLIENT_SECRET
  GITHUB_CLIENT_ID
  GITHUB_CLIENT_SECRET
  MICROSOFT_CLIENT_ID
  MICROSOFT_CLIENT_SECRET
}

type Mutation {
  """Update user sessions"""
  updateUserSessions(
    """JSON string of the saved REST/GQL session"""
    currentSession: String!

    """Type of the session"""
    sessionType: SessionType!
  ): User! @isLogin

  """Delete an user account"""
  deleteUser: Boolean! @isAdmin

  """Update Infra Configs"""
  updateInfraConfigs(
    """InfraConfigs to update"""
    infraConfigs: [InfraConfigArgs!]!
  ): [InfraConfig!]! @isAdmin

  """Reset Infra Configs with default values (.env)"""
  resetInfraConfigs: Boolean! @isAdmin

  """Enable or Disable SSO for login/signup"""
  enableAndDisableSSO(
    """SSO provider and status"""
    providerInfo: [EnableAndDisableSSOArgs!]!
  ): Boolean! @isAdmin

  """Invite a user to the infra using email"""
  inviteNewUser(
    """invitee email"""
    inviteeEmail: String!
  ): InvitedUser! @isAdmin

  """Delete an user account from infra"""
  removeUserByAdmin(
    """users UID"""
    userUID: ID!
  ): Boolean! @isAdmin

  """Make user an admin"""
  makeUserAdmin(
    """users UID"""
    userUID: ID!
  ): Boolean! @isAdmin

  """Remove user as admin"""
  removeUserAsAdmin(
    """users UID"""
    userUID: ID!
  ): Boolean! @isAdmin

  """Create a new team by providing the user uid to nominate as Team owner"""
  createTeamByAdmin(
    """users uid to make team owner"""
    userUid: ID!

    """Displayed name of the team"""
    name: String!
  ): Team! @isAdmin

  """Change the role of a user in a team"""
  changeUserRoleInTeamByAdmin(
    """users UID"""
    userUID: ID!

    """team ID"""
    teamID: ID!

    """updated team role"""
    newRole: TeamMemberRole!
  ): TeamMember! @isAdmin

  """Remove the user from a team"""
  removeUserFromTeamByAdmin(
    """users UID"""
    userUid: ID!

    """team ID"""
    teamID: ID!
  ): Boolean! @isAdmin

  """Add a user to a team with email and team member role"""
  addUserToTeamByAdmin(
    """team ID"""
    teamID: ID!

    """The role of the user to add in the team"""
    role: TeamMemberRole!

    """Email of the user to add to team"""
    userEmail: String!
  ): TeamMember! @isAdmin

  """Change a team name"""
  renameTeamByAdmin(
    """ID of the team"""
    teamID: ID!

    """The updated name of the team"""
    newName: String!
  ): Team! @isAdmin

  """Delete a team"""
  deleteTeamByAdmin(
    """ID of the team"""
    teamID: ID!
  ): Boolean! @isAdmin

  """Revoke a team Invite by Invite ID"""
  revokeTeamInviteByAdmin(
    """Team Invite ID"""
    inviteID: ID!
  ): Boolean! @isAdmin

  """Revoke Shortcode by ID"""
  revokeShortcodeByAdmin(
    """The shortcode to delete"""
    code: ID!
  ): Boolean! @isAdmin

  """Creates a team owned by the executing user"""
  createTeam(
    """Displayed name of the team"""
    name: String!
  ): Team! @isLogin

  """Leaves a team the executing user is a part of"""
  leaveTeam(
    """ID of the Team to leave"""
    teamID: ID!
  ): Boolean! @isLogin

  """Removes the team member from the team"""
  removeTeamMember(
    """ID of the Team to remove user from"""
    teamID: ID!

    """ID of the user to remove from the given team"""
    userUid: ID!
  ): Boolean! @isLogin

  """Renames a team"""
  renameTeam(
    """ID of the team"""
    teamID: ID!

    """The updated name of the team"""
    newName: String!
  ): Team! @isLogin

  """Deletes the team"""
  deleteTeam(
    """ID of the team"""
    teamID: ID!
  ): Boolean! @isLogin

  """Update role of a team member the executing user owns"""
  updateTeamMemberRole(
    """ID of the affected team"""
    teamID: ID!

    """UID of the affected user"""
    userUid: ID!

    """Updated role value"""
    newRole: TeamMemberRole!
  ): TeamMember! @isLogin

  """Creates a Team Invitation"""
  createTeamInvitation(
    """ID of the Team ID to invite from"""
    teamID: ID!

    """Email of the user to invite"""
    inviteeEmail: String!

    """Role to be given to the user"""
    inviteeRole: TeamMemberRole!
  ): TeamInvitation! @isLogin

  """Revokes an invitation and deletes it"""
  revokeTeamInvitation(
    """ID of the invite to revoke"""
    inviteID: ID!
  ): Boolean! @isLogin

  """Accept an Invitation"""
  acceptTeamInvitation(
    """ID of the Invite to accept"""
    inviteID: ID!
  ): TeamMember! @isLogin

  """Create a new Team Environment for given Team ID"""
  createTeamEnvironment(
    """Name of the Team Environment"""
    name: String!

    """ID of the Team"""
    teamID: ID!

    """JSON string of the variables object"""
    variables: String!
  ): TeamEnvironment! @isLogin

  """Delete a Team Environment for given Team ID"""
  deleteTeamEnvironment(
    """ID of the Team Environment"""
    id: ID!
  ): Boolean! @isLogin

  """
  Add/Edit a single environment variable or variables to a Team Environment
  """
  updateTeamEnvironment(
    """ID of the Team Environment"""
    id: ID!

    """Name of the Team Environment"""
    name: String!

    """JSON string of the variables object"""
    variables: String!
  ): TeamEnvironment! @isLogin

  """Delete all variables from a Team Environment"""
  deleteAllVariablesFromTeamEnvironment(
    """ID of the Team Environment"""
    id: ID!
  ): TeamEnvironment! @isLogin

  """Create a duplicate of an existing environment"""
  createDuplicateEnvironment(
    """ID of the Team Environment"""
    id: ID!
  ): TeamEnvironment! @isLogin

  """
  Creates a collection at the root of the team hierarchy (no parent collection)
  """
  createRootCollection(
    """ID of the team"""
    teamID: ID!

    """Title of the new collection"""
    title: String!

    """JSON string representing the collection data"""
    data: String
  ): TeamCollection! @isLogin

  """Import collections from JSON string to the specified Team"""
  importCollectionsFromJSON(
    """Id of the team to add to"""
    teamID: ID!

    """JSON string to import"""
    jsonString: String!

    """
    ID to the collection to which to import to (null if to import to the root of team)
    """
    parentCollectionID: ID
  ): Boolean! @isLogin

  """
  Replace existing collections of a specific team with collections in JSON string
  """
  replaceCollectionsWithJSON(
    """Id of the team to add to"""
    teamID: ID!

    """JSON string to replace with"""
    jsonString: String!

    """
    ID to the collection to which to import to (null if to import to the root of team)
    """
    parentCollectionID: ID
  ): Boolean! @isLogin

  """Create a collection that has a parent collection"""
  createChildCollection(
    """ID of the parent to the new collection"""
    collectionID: ID!

    """Title of the new collection"""
    childTitle: String!

    """JSON string representing the collection data"""
    data: String
  ): TeamCollection! @isLogin

  """Rename a collection"""
  renameCollection(
    """ID of the collection"""
    collectionID: ID!

    """The updated title of the collection"""
    newTitle: String!
  ): TeamCollection! @deprecated(reason: "Switch to updateTeamCollection mutation instead")

  """Delete a collection"""
  deleteCollection(
    """ID of the collection"""
    collectionID: ID!
  ): Boolean! @isLogin

  """Move a collection into a new parent collection or the root of the team"""
  moveCollection(
    """ID of the parent to the new collection"""
    parentCollectionID: ID

    """ID of the collection"""
    collectionID: ID!
  ): TeamCollection! @isLogin

  """Update the order of collections"""
  updateCollectionOrder(
    """ID of the collection"""
    collectionID: ID!

    """
    ID of the collection that comes after the updated collection in its new position
    """
    destCollID: ID
  ): Boolean! @isLogin

  """Update Team Collection details"""
  updateTeamCollection(
    """ID of the collection"""
    collectionID: ID!

    """The updated title of the collection"""
    newTitle: String

    """JSON string representing the collection data"""
    data: String
  ): TeamCollection! @isLogin

  """Create a team request in the given collection."""
  createRequestInCollection(
    """ID of the collection"""
    collectionID: ID!

    """The request data (stringified JSON of Hoppscotch request object)"""
    data: CreateTeamRequestInput!
  ): TeamRequest! @isLogin

  """Update a request with the given ID"""
  updateRequest(
    """ID of the request"""
    requestID: ID!

    """
    The updated request data (stringified JSON of Hoppscotch request object)
    """
    data: UpdateTeamRequestInput!
  ): TeamRequest! @isLogin

  """Delete a request with the given ID"""
  deleteRequest(
    """ID of the request"""
    requestID: ID!
  ): Boolean! @isLogin

  """Update the order of requests in the lookup table"""
  updateLookUpRequestOrder(
    """ID of the collection"""
    collectionID: ID!

    """
    ID of the request that comes after the updated request in its new position
    """
    nextRequestID: ID

    """ID of the request to move"""
    requestID: ID!
  ): Boolean! @isLogin

  """Move a request to the given collection"""
  moveRequest(
    """ID of the collection, the request belong to"""
    srcCollID: ID

    """ID of the request to move"""
    requestID: ID!

    """ID of the collection, where the request is moving to"""
    destCollID: ID!

    """
    ID of the request that comes after the updated request in its new position
    """
    nextRequestID: ID
  ): TeamRequest! @isLogin

  """Create a shortcode for the given request."""
  createShortcode(
    """JSON string of the request object"""
    request: String!

    """JSON string of the properties of the embed"""
    properties: String
  ): Shortcode! @isLogin

  """Update a user generated Shortcode"""
  updateEmbedProperties(
    """The Shortcode to update"""
    code: ID!

    """JSON string of the properties of the embed"""
    properties: String!
  ): Shortcode! @isLogin

  """Revoke a user generated shortcode"""
  revokeShortcode(
    """The shortcode to remove"""
    code: ID!
  ): Boolean! @isLogin

  """Creates a new user setting"""
  createUserSettings(
    """Stringified JSON settings object"""
    properties: String!
  ): UserSettings! @isLogin

  """Update user setting for a given user"""
  updateUserSettings(
    """Stringified JSON settings object"""
    properties: String!
  ): UserSettings! @isLogin

  """Create a new personal user environment for given user uid"""
  createUserEnvironment(
    """Name of the User Environment, if global send an empty string"""
    name: String!

    """JSON string of the variables object"""
    variables: String!
  ): UserEnvironment! @isLogin

  """Create a new global user environment for given user uid"""
  createUserGlobalEnvironment(
    """JSON string of the variables object"""
    variables: String!
  ): UserEnvironment! @isLogin

  """Updates a users personal or global environment"""
  updateUserEnvironment(
    """ID of the user environment"""
    id: ID!

    """Name of the User Environment, if global send an empty string"""
    name: String!

    """JSON string of the variables object"""
    variables: String!
  ): UserEnvironment! @isLogin

  """Deletes a users personal environment"""
  deleteUserEnvironment(
    """ID of the user environment"""
    id: ID!
  ): Boolean! @isLogin

  """Deletes all of users personal environments"""
  deleteUserEnvironments: Int! @isLogin

  """Deletes all variables inside a users global environment"""
  clearGlobalEnvironments(
    """ID of the users global environment"""
    id: ID!
  ): UserEnvironment! @isLogin

  """Adds a new REST/GQL request to user history"""
  createUserHistory(
    """JSON string of the request data"""
    reqData: String!

    """JSON string of the response metadata"""
    resMetadata: String!

    """Request type, REST or GQL"""
    reqType: ReqType!
  ): UserHistory! @isLogin

  """Stars/Unstars a REST/GQL request in user history"""
  toggleHistoryStarStatus(
    """ID of User History"""
    id: ID!
  ): UserHistory! @isLogin

  """Removes a REST/GQL request from user history"""
  removeRequestFromHistory(
    """ID of User History"""
    id: ID!
  ): UserHistory! @isLogin

  """Deletes all REST/GQL history for a user based on Request type"""
  deleteAllUserHistory(
    """Request type, REST or GQL"""
    reqType: ReqType!
  ): UserHistoryDeletedManyData! @isLogin

  """Create a new user REST request"""
  createRESTUserRequest(
    """Collection ID of the user request"""
    collectionID: ID!

    """Title of the user request"""
    title: String!

    """content/body of the user request"""
    request: String!
  ): UserRequest! @isLogin

  """Create a new user GraphQL request"""
  createGQLUserRequest(
    """Collection ID of the user request"""
    collectionID: ID!

    """Title of the user request"""
    title: String!

    """content/body of the user request"""
    request: String!
  ): UserRequest! @isLogin

  """Update a user REST request"""
  updateRESTUserRequest(
    """ID of the user REST request"""
    id: ID!

    """Title of the user request"""
    title: String

    """content/body of the user request"""
    request: String
  ): UserRequest! @isLogin

  """Update a user GraphQL request"""
  updateGQLUserRequest(
    """ID of the user GraphQL request"""
    id: ID!

    """Title of the user request"""
    title: String

    """content/body of the user request"""
    request: String
  ): UserRequest! @isLogin

  """Delete a user request"""
  deleteUserRequest(
    """ID of the user request"""
    id: ID!
  ): Boolean! @isLogin

  """Move and re-order of a user request within same or across collection"""
  moveUserRequest(
    """ID of the collection, where the request is belongs to"""
    sourceCollectionID: ID!

    """ID of the request being moved"""
    requestID: ID!

    """ID of the collection, where the request is moving to"""
    destinationCollectionID: ID!

    """
    ID of the request that comes after the updated request in its new position
    """
    nextRequestID: ID
  ): UserRequest! @isLogin

  """Creates root REST user collection(no parent user collection)"""
  createRESTRootUserCollection(
    """Title of the new user collection"""
    title: String!

    """JSON string representing the collection data"""
    data: String
  ): UserCollection! @isLogin

  """Creates root GraphQL user collection(no parent user collection)"""
  createGQLRootUserCollection(
    """Title of the new user collection"""
    title: String!

    """JSON string representing the collection data"""
    data: String
  ): UserCollection! @isLogin

  """Creates a new child GraphQL user collection"""
  createGQLChildUserCollection(
    """Title of the new user collection"""
    title: String!

    """ID of the parent to the new user collection"""
    parentUserCollectionID: ID!

    """JSON string representing the collection data"""
    data: String
  ): UserCollection! @isLogin

  """Creates a new child REST user collection"""
  createRESTChildUserCollection(
    """Title of the new user collection"""
    title: String!

    """ID of the parent to the new user collection"""
    parentUserCollectionID: ID!

    """JSON string representing the collection data"""
    data: String
  ): UserCollection! @isLogin

  """Rename a user collection"""
  renameUserCollection(
    """ID of the user collection"""
    userCollectionID: ID!

    """The updated title of the user collection"""
    newTitle: String!
  ): UserCollection! @isLogin

  """Delete a user collection"""
  deleteUserCollection(
    """ID of the user collection"""
    userCollectionID: ID!
  ): Boolean! @isLogin

  """Move user collection into new parent or root"""
  moveUserCollection(
    """ID of the parent to the new collection"""
    destCollectionID: ID

    """ID of the collection"""
    userCollectionID: ID!
  ): UserCollection! @isLogin

  """
  Update the order of UserCollections inside parent collection or in root
  """
  updateUserCollectionOrder(
    """ID of collection being moved"""
    collectionID: ID!

    """ID of collection being moved"""
    nextCollectionID: ID
  ): Boolean! @isLogin

  """Import collections from JSON string to the specified Team"""
  importUserCollectionsFromJSON(
    """JSON string to import"""
    jsonString: String!

    """Type of UserCollection"""
    reqType: ReqType!

    """
    ID to the collection to which to import into (null if to import into the root of the user)
    """
    parentCollectionID: ID
  ): Boolean! @isLogin

  """Update a UserCollection"""
  updateUserCollection(
    """ID of the user collection"""
    userCollectionID: ID!

    """The updated title of the user collection"""
    newTitle: String

    """JSON string representing the collection data"""
    data: String
  ): UserCollection! @isLogin
}

enum SessionType {
  REST
  GQL
}

input InfraConfigArgs {
  """Infra Config Name"""
  name: InfraConfigEnum!

  """Infra Config Value"""
  value: String!
}

input EnableAndDisableSSOArgs {
  """Auth Provider"""
  provider: AuthProvider!

  """Auth Provider Status"""
  status: ServiceStatus!
}

enum AuthProvider {
  GOOGLE
  GITHUB
  MICROSOFT
  EMAIL
}

enum ServiceStatus {
  ENABLE
  DISABLE
}

input CreateTeamRequestInput {
  """ID of the team the collection belongs to"""
  teamID: ID!

  """JSON string representing the request data"""
  request: String!

  """Displayed title of the request"""
  title: String!
}

input UpdateTeamRequestInput {
  """JSON string representing the request data"""
  request: String

  """Displayed title of the request"""
  title: String
}

type Subscription {
  """Listen for user updates"""
  userUpdated: User!

  """Listen for user deletion"""
  userDeleted: User!

  """Listen for User Invitation"""
  userInvited: InvitedUser!

  """
  Listen to when a new team member being added to the team. The emitted value is the new team member added.
  """
  teamMemberAdded(
    """ID of the team to listen to"""
    teamID: ID!
  ): TeamMember!

  """
  Listen to when a team member status has been updated. The emitted value is the new team member status
  """
  teamMemberUpdated(
    """ID of the team to listen to"""
    teamID: ID!
  ): TeamMember!

  """
  Listen to when a team member has been removed. The emitted value is the uid of the user removed
  """
  teamMemberRemoved(
    """ID of the team to listen to"""
    teamID: ID!
  ): ID!

  """Listens to when a Team Invitation is added"""
  teamInvitationAdded(
    """ID of the Team to listen to"""
    teamID: ID!
  ): TeamInvitation!

  """Listens to when a Team Invitation is removed"""
  teamInvitationRemoved(
    """ID of the Team to listen to"""
    teamID: ID!
  ): ID!

  """Listen for Team Environment Updates"""
  teamEnvironmentUpdated(
    """ID of the Team"""
    teamID: ID!
  ): TeamEnvironment!

  """Listen for Team Environment Creation Messages"""
  teamEnvironmentCreated(
    """ID of the Team"""
    teamID: ID!
  ): TeamEnvironment!

  """Listen for Team Environment Deletion Messages"""
  teamEnvironmentDeleted(
    """ID of the Team"""
    teamID: ID!
  ): TeamEnvironment!

  """
  Listen to when a collection has been added to a team. The emitted value is the team added
  """
  teamCollectionAdded(
    """ID of the team to listen to"""
    teamID: ID!
  ): TeamCollection!

  """Listen to when a collection has been updated."""
  teamCollectionUpdated(
    """ID of the team to listen to"""
    teamID: ID!
  ): TeamCollection!

  """Listen to when a collection has been removed"""
  teamCollectionRemoved(
    """ID of the team to listen to"""
    teamID: ID!
  ): ID!

  """Listen to when a collection has been moved"""
  teamCollectionMoved(
    """ID of the team to listen to"""
    teamID: ID!
  ): TeamCollection!

  """Listen to when a collections position has changed"""
  collectionOrderUpdated(
    """ID of the team to listen to"""
    teamID: ID!
  ): CollectionReorderData!

  """Emits when a new request is added to a team"""
  teamRequestAdded(
    """ID of the team to listen to"""
    teamID: ID!
  ): TeamRequest!

  """Emitted when a request has been updated"""
  teamRequestUpdated(
    """ID of the team to listen to"""
    teamID: ID!
  ): TeamRequest!

  """
  Emitted when a request has been deleted. Only the id of the request is emitted.
  """
  teamRequestDeleted(
    """ID of the team to listen to"""
    teamID: ID!
  ): ID!

  """Emitted when a requests position has been changed in its collection"""
  requestOrderUpdated(
    """ID of the team to listen to"""
    teamID: ID!
  ): RequestReorderData!

  """Emitted when a request has been moved from one collection into another"""
  requestMoved(
    """ID of the team to listen to"""
    teamID: ID!
  ): TeamRequest!

  """Listen for shortcode creation"""
  myShortcodesCreated: Shortcode!

  """Listen for Shortcode updates"""
  myShortcodesUpdated: Shortcode!

  """Listen for shortcode deletion"""
  myShortcodesRevoked: Shortcode!

  """Listen for user setting creation"""
  userSettingsCreated: UserSettings!

  """Listen for user setting updates"""
  userSettingsUpdated: UserSettings!

  """Listen for User Environment Creation"""
  userEnvironmentCreated: UserEnvironment!

  """Listen for User Environment updates"""
  userEnvironmentUpdated: UserEnvironment!

  """Listen for User Environment deletion"""
  userEnvironmentDeleted: UserEnvironment!

  """Listen for User Environment DeleteMany"""
  userEnvironmentDeleteMany: Int!

  """Listen for User History Creation"""
  userHistoryCreated: UserHistory!

  """Listen for User History update"""
  userHistoryUpdated: UserHistory!

  """Listen for User History deletion"""
  userHistoryDeleted: UserHistory!

  """Listen for User History deleted many"""
  userHistoryDeletedMany: UserHistoryDeletedManyData!

  """Listen for User Request Creation"""
  userRequestCreated: UserRequest!

  """Listen for User Request Update"""
  userRequestUpdated: UserRequest!

  """Listen for User Request Deletion"""
  userRequestDeleted: UserRequest!

  """Listen for User Request Moved"""
  userRequestMoved: UserRequestReorderData!

  """Listen for User Collection Creation"""
  userCollectionCreated: UserCollection!

  """Listen to when a User Collection has been updated."""
  userCollectionUpdated: UserCollection!

  """Listen to when a User Collection has been deleted"""
  userCollectionRemoved: UserCollectionRemovedData!

  """Listen to when a User Collection has been moved"""
  userCollectionMoved: UserCollection!

  """Listen to when a User Collections position has changed"""
  userCollectionOrderUpdated: UserCollectionReorderData!
}

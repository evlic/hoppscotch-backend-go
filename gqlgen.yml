# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - api/graphql/*.graphqls

# Where should the generated server code go?
exec:
  filename: internal/graph/generated.go
  package: graph

# Uncomment to enable federation
# federation:
#   filename: graph/federation.go
#   package: graph

# Where should any generated models go?
model:
  filename: internal/graph/dto/models_gen.go
  package: dto

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: internal/graph
  package: graph
  filename_template: "{name}.resolvers.go"
  # Optional: turn on to not generate template comments above resolvers
  omit_template_comment: true

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn on to omit Is<Name>() methods to interface and unions
# omit_interface_checks : true

# Optional: turn on to skip generation of ComplexityRoot struct content and Complexity function
# omit_complexity: false

# Optional: turn on to not generate any file notice comments in generated files
# omit_gqlgen_file_notice: false

# Optional: turn on to exclude the gqlgen version in the generated file notice. No effect if `omit_gqlgen_file_notice` is true.
# omit_gqlgen_version_in_file_notice: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: turn on to return pointers instead of values in unmarshalInput
# return_pointers_in_unmarshalinput: false

# Optional: wrap nullable input fields with Omittable
# nullable_input_omittable: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# Optional: set to skip running `go mod tidy` when generating server code
# skip_mod_tidy: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  # - "pkg/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int64:
    model:
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int

  DateTime:
    model: graph.DateTimeScalar

  ReqType:
    model: model.ReqType

  SessionType:
    model: model.ReqType

  TeamMemberRole:
    model: model.TeamMemberRole

  User:
    model: model.User
    fields:
      globalEnvironments:
        resolver: true
      RESTHistory:
        resolver: true
      GQLHistory:
        resolver: true

  UserSettings:
    model: model.UserSetting

  UserEnvironment:
    model: model.UserEnvironment

  UserCollection:
    model: model.UserCollection
    fields:
      childrenREST:
        resolver: true
      childrenGQL:
        resolver: true

  UserRequest:
    model: model.UserRequest

  UserHistory:
    model: model.UserHistory

  Team:
    model: model.Team
    fields:
      teamInvitations:
        resolver: true
      teamEnvironments:
        resolver: true
      ownersCount:
        resolver: true
      editorsCount:
        resolver: true
      viewersCount:
        resolver: true

  TeamMember:
    model: model.TeamMember
    fields:
      membershipID:
        fieldName: ID

  TeamEnvironment:
    model: model.TeamEnvironment

  TeamCollection:
    model: model.TeamCollection

  TeamRequest:
    model: model.TeamRequest

  TeamInvitation:
    model: model.TeamInvitation

  InvitedUser:
    model: model.InvitedUser

  Shortcode:
    model: model.Shortcode
    fields:
      properties:
        fieldName: EmbedProperties

  InfraConfig:
    model: model.InfraConfig

  Infra:
    fields:
      UserInfo:
        resolver: true
      AllUsers:
        resolver: true
      InvitedUsers:
        resolver: true
      AllTeams:
        resolver: true
      TeamInfo:
        resolver: true
      PendingInvitationCountInTeam:
        resolver: true
      AllShortcodes:
        resolver: true
      MembersCountInTeam:
        resolver: true
      CollectionCountInTeam:
        resolver: true
      RequestCountInTeam:
        resolver: true
      EnvironmentCountInTeam:
        resolver: true
